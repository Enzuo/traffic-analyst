var us=Object.defineProperty;var ds=(w,t,e)=>t in w?us(w,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):w[t]=e;var V=(w,t,e)=>ds(w,typeof t!="symbol"?t+"":t,e);import{s as He,e as ps,a as fs,B as le,c as ms,b as ys,f as Ft,g as vs,i as Xt,z as ws,l as gs,n as xs}from"../chunks/scheduler.C19aQTI2.js";import{S as Ge,i as De,a as St,g as bs,t as kt,e as Es,c as Ye,b as Xe,m as Ue,d as $e}from"../chunks/index.B0knyX5n.js";import{V as K,L as Cs,h as Bs,i as Ss,j as Ze,e as J,k as zs,m as zt,n as Ke,Q as Qe,M as Je,o as he,B as se,P as ne,p as As,F as Ut,q as Is,d as Ms,f as Fs,r as Ps}from"../chunks/loader.CaIUhdO0.js";import"../chunks/uPlot.min.Sk6Afor8.js";import{C as Rs,a as Ts}from"../chunks/index.JSGz7vAS.js";import{W as $t,c as Ns}from"../chunks/CarEntity3D.DIBYzGMn.js";import{U as _s}from"../chunks/UPlotRealtime.qV2_dZlo.js";class tt{constructor(t){t===void 0&&(t=[0,0,0,0,0,0,0,0,0]),this.elements=t}identity(){const t=this.elements;t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1}setZero(){const t=this.elements;t[0]=0,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t[8]=0}setTrace(t){const e=this.elements;e[0]=t.x,e[4]=t.y,e[8]=t.z}getTrace(t){t===void 0&&(t=new h);const e=this.elements;return t.x=e[0],t.y=e[4],t.z=e[8],t}vmult(t,e){e===void 0&&(e=new h);const s=this.elements,n=t.x,i=t.y,r=t.z;return e.x=s[0]*n+s[1]*i+s[2]*r,e.y=s[3]*n+s[4]*i+s[5]*r,e.z=s[6]*n+s[7]*i+s[8]*r,e}smult(t){for(let e=0;e<this.elements.length;e++)this.elements[e]*=t}mmult(t,e){e===void 0&&(e=new tt);const s=this.elements,n=t.elements,i=e.elements,r=s[0],c=s[1],o=s[2],a=s[3],u=s[4],d=s[5],l=s[6],f=s[7],p=s[8],m=n[0],v=n[1],g=n[2],y=n[3],E=n[4],S=n[5],x=n[6],I=n[7],P=n[8];return i[0]=r*m+c*y+o*x,i[1]=r*v+c*E+o*I,i[2]=r*g+c*S+o*P,i[3]=a*m+u*y+d*x,i[4]=a*v+u*E+d*I,i[5]=a*g+u*S+d*P,i[6]=l*m+f*y+p*x,i[7]=l*v+f*E+p*I,i[8]=l*g+f*S+p*P,e}scale(t,e){e===void 0&&(e=new tt);const s=this.elements,n=e.elements;for(let i=0;i!==3;i++)n[3*i+0]=t.x*s[3*i+0],n[3*i+1]=t.y*s[3*i+1],n[3*i+2]=t.z*s[3*i+2];return e}solve(t,e){e===void 0&&(e=new h);const s=3,n=4,i=[];let r,c;for(r=0;r<s*n;r++)i.push(0);for(r=0;r<3;r++)for(c=0;c<3;c++)i[r+n*c]=this.elements[r+3*c];i[3+4*0]=t.x,i[3+4*1]=t.y,i[3+4*2]=t.z;let o=3;const a=o;let u;const d=4;let l;do{if(r=a-o,i[r+n*r]===0){for(c=r+1;c<a;c++)if(i[r+n*c]!==0){u=d;do l=d-u,i[l+n*r]+=i[l+n*c];while(--u);break}}if(i[r+n*r]!==0)for(c=r+1;c<a;c++){const f=i[r+n*c]/i[r+n*r];u=d;do l=d-u,i[l+n*c]=l<=r?0:i[l+n*c]-i[l+n*r]*f;while(--u)}}while(--o);if(e.z=i[2*n+3]/i[2*n+2],e.y=(i[1*n+3]-i[1*n+2]*e.z)/i[1*n+1],e.x=(i[0*n+3]-i[0*n+2]*e.z-i[0*n+1]*e.y)/i[0*n+0],isNaN(e.x)||isNaN(e.y)||isNaN(e.z)||e.x===1/0||e.y===1/0||e.z===1/0)throw`Could not solve equation! Got x=[${e.toString()}], b=[${t.toString()}], A=[${this.toString()}]`;return e}e(t,e,s){if(s===void 0)return this.elements[e+3*t];this.elements[e+3*t]=s}copy(t){for(let e=0;e<t.elements.length;e++)this.elements[e]=t.elements[e];return this}toString(){let t="";const e=",";for(let s=0;s<9;s++)t+=this.elements[s]+e;return t}reverse(t){t===void 0&&(t=new tt);const e=3,s=6,n=Ls;let i,r;for(i=0;i<3;i++)for(r=0;r<3;r++)n[i+s*r]=this.elements[i+3*r];n[3+6*0]=1,n[3+6*1]=0,n[3+6*2]=0,n[4+6*0]=0,n[4+6*1]=1,n[4+6*2]=0,n[5+6*0]=0,n[5+6*1]=0,n[5+6*2]=1;let c=3;const o=c;let a;const u=s;let d;do{if(i=o-c,n[i+s*i]===0){for(r=i+1;r<o;r++)if(n[i+s*r]!==0){a=u;do d=u-a,n[d+s*i]+=n[d+s*r];while(--a);break}}if(n[i+s*i]!==0)for(r=i+1;r<o;r++){const l=n[i+s*r]/n[i+s*i];a=u;do d=u-a,n[d+s*r]=d<=i?0:n[d+s*r]-n[d+s*i]*l;while(--a)}}while(--c);i=2;do{r=i-1;do{const l=n[i+s*r]/n[i+s*i];a=s;do d=s-a,n[d+s*r]=n[d+s*r]-n[d+s*i]*l;while(--a)}while(r--)}while(--i);i=2;do{const l=1/n[i+s*i];a=s;do d=s-a,n[d+s*i]=n[d+s*i]*l;while(--a)}while(i--);i=2;do{r=2;do{if(d=n[e+r+s*i],isNaN(d)||d===1/0)throw`Could not reverse! A=[${this.toString()}]`;t.e(i,r,d)}while(r--)}while(i--);return t}setRotationFromQuaternion(t){const e=t.x,s=t.y,n=t.z,i=t.w,r=e+e,c=s+s,o=n+n,a=e*r,u=e*c,d=e*o,l=s*c,f=s*o,p=n*o,m=i*r,v=i*c,g=i*o,y=this.elements;return y[3*0+0]=1-(l+p),y[3*0+1]=u-g,y[3*0+2]=d+v,y[3*1+0]=u+g,y[3*1+1]=1-(a+p),y[3*1+2]=f-m,y[3*2+0]=d-v,y[3*2+1]=f+m,y[3*2+2]=1-(a+l),this}transpose(t){t===void 0&&(t=new tt);const e=this.elements,s=t.elements;let n;return s[0]=e[0],s[4]=e[4],s[8]=e[8],n=e[1],s[1]=e[3],s[3]=n,n=e[2],s[2]=e[6],s[6]=n,n=e[5],s[5]=e[7],s[7]=n,t}}const Ls=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];class h{constructor(t,e,s){t===void 0&&(t=0),e===void 0&&(e=0),s===void 0&&(s=0),this.x=t,this.y=e,this.z=s}cross(t,e){e===void 0&&(e=new h);const s=t.x,n=t.y,i=t.z,r=this.x,c=this.y,o=this.z;return e.x=c*i-o*n,e.y=o*s-r*i,e.z=r*n-c*s,e}set(t,e,s){return this.x=t,this.y=e,this.z=s,this}setZero(){this.x=this.y=this.z=0}vadd(t,e){if(e)e.x=t.x+this.x,e.y=t.y+this.y,e.z=t.z+this.z;else return new h(this.x+t.x,this.y+t.y,this.z+t.z)}vsub(t,e){if(e)e.x=this.x-t.x,e.y=this.y-t.y,e.z=this.z-t.z;else return new h(this.x-t.x,this.y-t.y,this.z-t.z)}crossmat(){return new tt([0,-this.z,this.y,this.z,0,-this.x,-this.y,this.x,0])}normalize(){const t=this.x,e=this.y,s=this.z,n=Math.sqrt(t*t+e*e+s*s);if(n>0){const i=1/n;this.x*=i,this.y*=i,this.z*=i}else this.x=0,this.y=0,this.z=0;return n}unit(t){t===void 0&&(t=new h);const e=this.x,s=this.y,n=this.z;let i=Math.sqrt(e*e+s*s+n*n);return i>0?(i=1/i,t.x=e*i,t.y=s*i,t.z=n*i):(t.x=1,t.y=0,t.z=0),t}length(){const t=this.x,e=this.y,s=this.z;return Math.sqrt(t*t+e*e+s*s)}lengthSquared(){return this.dot(this)}distanceTo(t){const e=this.x,s=this.y,n=this.z,i=t.x,r=t.y,c=t.z;return Math.sqrt((i-e)*(i-e)+(r-s)*(r-s)+(c-n)*(c-n))}distanceSquared(t){const e=this.x,s=this.y,n=this.z,i=t.x,r=t.y,c=t.z;return(i-e)*(i-e)+(r-s)*(r-s)+(c-n)*(c-n)}scale(t,e){e===void 0&&(e=new h);const s=this.x,n=this.y,i=this.z;return e.x=t*s,e.y=t*n,e.z=t*i,e}vmul(t,e){return e===void 0&&(e=new h),e.x=t.x*this.x,e.y=t.y*this.y,e.z=t.z*this.z,e}addScaledVector(t,e,s){return s===void 0&&(s=new h),s.x=this.x+t*e.x,s.y=this.y+t*e.y,s.z=this.z+t*e.z,s}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}isZero(){return this.x===0&&this.y===0&&this.z===0}negate(t){return t===void 0&&(t=new h),t.x=-this.x,t.y=-this.y,t.z=-this.z,t}tangents(t,e){const s=this.length();if(s>0){const n=Ws,i=1/s;n.set(this.x*i,this.y*i,this.z*i);const r=Vs;Math.abs(n.x)<.9?(r.set(1,0,0),n.cross(r,t)):(r.set(0,1,0),n.cross(r,t)),n.cross(t,e)}else t.set(1,0,0),e.set(0,1,0)}toString(){return`${this.x},${this.y},${this.z}`}toArray(){return[this.x,this.y,this.z]}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}lerp(t,e,s){const n=this.x,i=this.y,r=this.z;s.x=n+(t.x-n)*e,s.y=i+(t.y-i)*e,s.z=r+(t.z-r)*e}almostEquals(t,e){return e===void 0&&(e=1e-6),!(Math.abs(this.x-t.x)>e||Math.abs(this.y-t.y)>e||Math.abs(this.z-t.z)>e)}almostZero(t){return t===void 0&&(t=1e-6),!(Math.abs(this.x)>t||Math.abs(this.y)>t||Math.abs(this.z)>t)}isAntiparallelTo(t,e){return this.negate(ue),ue.almostEquals(t,e)}clone(){return new h(this.x,this.y,this.z)}}h.ZERO=new h(0,0,0);h.UNIT_X=new h(1,0,0);h.UNIT_Y=new h(0,1,0);h.UNIT_Z=new h(0,0,1);const Ws=new h,Vs=new h,ue=new h;class G{constructor(t){t===void 0&&(t={}),this.lowerBound=new h,this.upperBound=new h,t.lowerBound&&this.lowerBound.copy(t.lowerBound),t.upperBound&&this.upperBound.copy(t.upperBound)}setFromPoints(t,e,s,n){const i=this.lowerBound,r=this.upperBound,c=s;i.copy(t[0]),c&&c.vmult(i,i),r.copy(i);for(let o=1;o<t.length;o++){let a=t[o];c&&(c.vmult(a,de),a=de),a.x>r.x&&(r.x=a.x),a.x<i.x&&(i.x=a.x),a.y>r.y&&(r.y=a.y),a.y<i.y&&(i.y=a.y),a.z>r.z&&(r.z=a.z),a.z<i.z&&(i.z=a.z)}return e&&(e.vadd(i,i),e.vadd(r,r)),n&&(i.x-=n,i.y-=n,i.z-=n,r.x+=n,r.y+=n,r.z+=n),this}copy(t){return this.lowerBound.copy(t.lowerBound),this.upperBound.copy(t.upperBound),this}clone(){return new G().copy(this)}extend(t){this.lowerBound.x=Math.min(this.lowerBound.x,t.lowerBound.x),this.upperBound.x=Math.max(this.upperBound.x,t.upperBound.x),this.lowerBound.y=Math.min(this.lowerBound.y,t.lowerBound.y),this.upperBound.y=Math.max(this.upperBound.y,t.upperBound.y),this.lowerBound.z=Math.min(this.lowerBound.z,t.lowerBound.z),this.upperBound.z=Math.max(this.upperBound.z,t.upperBound.z)}overlaps(t){const e=this.lowerBound,s=this.upperBound,n=t.lowerBound,i=t.upperBound,r=n.x<=s.x&&s.x<=i.x||e.x<=i.x&&i.x<=s.x,c=n.y<=s.y&&s.y<=i.y||e.y<=i.y&&i.y<=s.y,o=n.z<=s.z&&s.z<=i.z||e.z<=i.z&&i.z<=s.z;return r&&c&&o}volume(){const t=this.lowerBound,e=this.upperBound;return(e.x-t.x)*(e.y-t.y)*(e.z-t.z)}contains(t){const e=this.lowerBound,s=this.upperBound,n=t.lowerBound,i=t.upperBound;return e.x<=n.x&&s.x>=i.x&&e.y<=n.y&&s.y>=i.y&&e.z<=n.z&&s.z>=i.z}getCorners(t,e,s,n,i,r,c,o){const a=this.lowerBound,u=this.upperBound;t.copy(a),e.set(u.x,a.y,a.z),s.set(u.x,u.y,a.z),n.set(a.x,u.y,u.z),i.set(u.x,a.y,u.z),r.set(a.x,u.y,a.z),c.set(a.x,a.y,u.z),o.copy(u)}toLocalFrame(t,e){const s=pe,n=s[0],i=s[1],r=s[2],c=s[3],o=s[4],a=s[5],u=s[6],d=s[7];this.getCorners(n,i,r,c,o,a,u,d);for(let l=0;l!==8;l++){const f=s[l];t.pointToLocal(f,f)}return e.setFromPoints(s)}toWorldFrame(t,e){const s=pe,n=s[0],i=s[1],r=s[2],c=s[3],o=s[4],a=s[5],u=s[6],d=s[7];this.getCorners(n,i,r,c,o,a,u,d);for(let l=0;l!==8;l++){const f=s[l];t.pointToWorld(f,f)}return e.setFromPoints(s)}overlapsRay(t){const{direction:e,from:s}=t,n=1/e.x,i=1/e.y,r=1/e.z,c=(this.lowerBound.x-s.x)*n,o=(this.upperBound.x-s.x)*n,a=(this.lowerBound.y-s.y)*i,u=(this.upperBound.y-s.y)*i,d=(this.lowerBound.z-s.z)*r,l=(this.upperBound.z-s.z)*r,f=Math.max(Math.max(Math.min(c,o),Math.min(a,u)),Math.min(d,l)),p=Math.min(Math.min(Math.max(c,o),Math.max(a,u)),Math.max(d,l));return!(p<0||f>p)}}const de=new h,pe=[new h,new h,new h,new h,new h,new h,new h,new h];class fe{constructor(){this.matrix=[]}get(t,e){let{index:s}=t,{index:n}=e;if(n>s){const i=n;n=s,s=i}return this.matrix[(s*(s+1)>>1)+n-1]}set(t,e,s){let{index:n}=t,{index:i}=e;if(i>n){const r=i;i=n,n=r}this.matrix[(n*(n+1)>>1)+i-1]=s?1:0}reset(){for(let t=0,e=this.matrix.length;t!==e;t++)this.matrix[t]=0}setNumObjects(t){this.matrix.length=t*(t-1)>>1}}class ts{addEventListener(t,e){this._listeners===void 0&&(this._listeners={});const s=this._listeners;return s[t]===void 0&&(s[t]=[]),s[t].includes(e)||s[t].push(e),this}hasEventListener(t,e){if(this._listeners===void 0)return!1;const s=this._listeners;return!!(s[t]!==void 0&&s[t].includes(e))}hasAnyEventListener(t){return this._listeners===void 0?!1:this._listeners[t]!==void 0}removeEventListener(t,e){if(this._listeners===void 0)return this;const s=this._listeners;if(s[t]===void 0)return this;const n=s[t].indexOf(e);return n!==-1&&s[t].splice(n,1),this}dispatchEvent(t){if(this._listeners===void 0)return this;const s=this._listeners[t.type];if(s!==void 0){t.target=this;for(let n=0,i=s.length;n<i;n++)s[n].call(this,t)}return this}}class H{constructor(t,e,s,n){t===void 0&&(t=0),e===void 0&&(e=0),s===void 0&&(s=0),n===void 0&&(n=1),this.x=t,this.y=e,this.z=s,this.w=n}set(t,e,s,n){return this.x=t,this.y=e,this.z=s,this.w=n,this}toString(){return`${this.x},${this.y},${this.z},${this.w}`}toArray(){return[this.x,this.y,this.z,this.w]}setFromAxisAngle(t,e){const s=Math.sin(e*.5);return this.x=t.x*s,this.y=t.y*s,this.z=t.z*s,this.w=Math.cos(e*.5),this}toAxisAngle(t){t===void 0&&(t=new h),this.normalize();const e=2*Math.acos(this.w),s=Math.sqrt(1-this.w*this.w);return s<.001?(t.x=this.x,t.y=this.y,t.z=this.z):(t.x=this.x/s,t.y=this.y/s,t.z=this.z/s),[t,e]}setFromVectors(t,e){if(t.isAntiparallelTo(e)){const s=qs,n=ks;t.tangents(s,n),this.setFromAxisAngle(s,Math.PI)}else{const s=t.cross(e);this.x=s.x,this.y=s.y,this.z=s.z,this.w=Math.sqrt(t.length()**2*e.length()**2)+t.dot(e),this.normalize()}return this}mult(t,e){e===void 0&&(e=new H);const s=this.x,n=this.y,i=this.z,r=this.w,c=t.x,o=t.y,a=t.z,u=t.w;return e.x=s*u+r*c+n*a-i*o,e.y=n*u+r*o+i*c-s*a,e.z=i*u+r*a+s*o-n*c,e.w=r*u-s*c-n*o-i*a,e}inverse(t){t===void 0&&(t=new H);const e=this.x,s=this.y,n=this.z,i=this.w;this.conjugate(t);const r=1/(e*e+s*s+n*n+i*i);return t.x*=r,t.y*=r,t.z*=r,t.w*=r,t}conjugate(t){return t===void 0&&(t=new H),t.x=-this.x,t.y=-this.y,t.z=-this.z,t.w=this.w,t}normalize(){let t=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return t===0?(this.x=0,this.y=0,this.z=0,this.w=0):(t=1/t,this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}normalizeFast(){const t=(3-(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w))/2;return t===0?(this.x=0,this.y=0,this.z=0,this.w=0):(this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}vmult(t,e){e===void 0&&(e=new h);const s=t.x,n=t.y,i=t.z,r=this.x,c=this.y,o=this.z,a=this.w,u=a*s+c*i-o*n,d=a*n+o*s-r*i,l=a*i+r*n-c*s,f=-r*s-c*n-o*i;return e.x=u*a+f*-r+d*-o-l*-c,e.y=d*a+f*-c+l*-r-u*-o,e.z=l*a+f*-o+u*-c-d*-r,e}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w,this}toEuler(t,e){e===void 0&&(e="YZX");let s,n,i;const r=this.x,c=this.y,o=this.z,a=this.w;switch(e){case"YZX":const u=r*c+o*a;if(u>.499&&(s=2*Math.atan2(r,a),n=Math.PI/2,i=0),u<-.499&&(s=-2*Math.atan2(r,a),n=-Math.PI/2,i=0),s===void 0){const d=r*r,l=c*c,f=o*o;s=Math.atan2(2*c*a-2*r*o,1-2*l-2*f),n=Math.asin(2*u),i=Math.atan2(2*r*a-2*c*o,1-2*d-2*f)}break;default:throw new Error(`Euler order ${e} not supported yet.`)}t.y=s,t.z=n,t.x=i}setFromEuler(t,e,s,n){n===void 0&&(n="XYZ");const i=Math.cos(t/2),r=Math.cos(e/2),c=Math.cos(s/2),o=Math.sin(t/2),a=Math.sin(e/2),u=Math.sin(s/2);return n==="XYZ"?(this.x=o*r*c+i*a*u,this.y=i*a*c-o*r*u,this.z=i*r*u+o*a*c,this.w=i*r*c-o*a*u):n==="YXZ"?(this.x=o*r*c+i*a*u,this.y=i*a*c-o*r*u,this.z=i*r*u-o*a*c,this.w=i*r*c+o*a*u):n==="ZXY"?(this.x=o*r*c-i*a*u,this.y=i*a*c+o*r*u,this.z=i*r*u+o*a*c,this.w=i*r*c-o*a*u):n==="ZYX"?(this.x=o*r*c-i*a*u,this.y=i*a*c+o*r*u,this.z=i*r*u-o*a*c,this.w=i*r*c+o*a*u):n==="YZX"?(this.x=o*r*c+i*a*u,this.y=i*a*c+o*r*u,this.z=i*r*u-o*a*c,this.w=i*r*c-o*a*u):n==="XZY"&&(this.x=o*r*c-i*a*u,this.y=i*a*c-o*r*u,this.z=i*r*u+o*a*c,this.w=i*r*c+o*a*u),this}clone(){return new H(this.x,this.y,this.z,this.w)}slerp(t,e,s){s===void 0&&(s=new H);const n=this.x,i=this.y,r=this.z,c=this.w;let o=t.x,a=t.y,u=t.z,d=t.w,l,f,p,m,v;return f=n*o+i*a+r*u+c*d,f<0&&(f=-f,o=-o,a=-a,u=-u,d=-d),1-f>1e-6?(l=Math.acos(f),p=Math.sin(l),m=Math.sin((1-e)*l)/p,v=Math.sin(e*l)/p):(m=1-e,v=e),s.x=m*n+v*o,s.y=m*i+v*a,s.z=m*r+v*u,s.w=m*c+v*d,s}integrate(t,e,s,n){n===void 0&&(n=new H);const i=t.x*s.x,r=t.y*s.y,c=t.z*s.z,o=this.x,a=this.y,u=this.z,d=this.w,l=e*.5;return n.x+=l*(i*d+r*u-c*a),n.y+=l*(r*d+c*o-i*u),n.z+=l*(c*d+i*a-r*o),n.w+=l*(-i*o-r*a-c*u),n}}const qs=new h,ks=new h,Os={SPHERE:1,PLANE:2,BOX:4,COMPOUND:8,CONVEXPOLYHEDRON:16,HEIGHTFIELD:32,PARTICLE:64,CYLINDER:128,TRIMESH:256};class T{constructor(t){t===void 0&&(t={}),this.id=T.idCounter++,this.type=t.type||0,this.boundingSphereRadius=0,this.collisionResponse=t.collisionResponse?t.collisionResponse:!0,this.collisionFilterGroup=t.collisionFilterGroup!==void 0?t.collisionFilterGroup:1,this.collisionFilterMask=t.collisionFilterMask!==void 0?t.collisionFilterMask:-1,this.material=t.material?t.material:null,this.body=null}updateBoundingSphereRadius(){throw`computeBoundingSphereRadius() not implemented for shape type ${this.type}`}volume(){throw`volume() not implemented for shape type ${this.type}`}calculateLocalInertia(t,e){throw`calculateLocalInertia() not implemented for shape type ${this.type}`}calculateWorldAABB(t,e,s,n){throw`calculateWorldAABB() not implemented for shape type ${this.type}`}}T.idCounter=0;T.types=Os;class O{constructor(t){t===void 0&&(t={}),this.position=new h,this.quaternion=new H,t.position&&this.position.copy(t.position),t.quaternion&&this.quaternion.copy(t.quaternion)}pointToLocal(t,e){return O.pointToLocalFrame(this.position,this.quaternion,t,e)}pointToWorld(t,e){return O.pointToWorldFrame(this.position,this.quaternion,t,e)}vectorToWorldFrame(t,e){return e===void 0&&(e=new h),this.quaternion.vmult(t,e),e}static pointToLocalFrame(t,e,s,n){return n===void 0&&(n=new h),s.vsub(t,n),e.conjugate(me),me.vmult(n,n),n}static pointToWorldFrame(t,e,s,n){return n===void 0&&(n=new h),e.vmult(s,n),n.vadd(t,n),n}static vectorToWorldFrame(t,e,s){return s===void 0&&(s=new h),t.vmult(e,s),s}static vectorToLocalFrame(t,e,s,n){return n===void 0&&(n=new h),e.w*=-1,e.vmult(s,n),e.w*=-1,n}}const me=new H;class ft extends T{constructor(t){t===void 0&&(t={});const{vertices:e=[],faces:s=[],normals:n=[],axes:i,boundingSphereRadius:r}=t;super({type:T.types.CONVEXPOLYHEDRON}),this.vertices=e,this.faces=s,this.faceNormals=n,this.faceNormals.length===0&&this.computeNormals(),r?this.boundingSphereRadius=r:this.updateBoundingSphereRadius(),this.worldVertices=[],this.worldVerticesNeedsUpdate=!0,this.worldFaceNormals=[],this.worldFaceNormalsNeedsUpdate=!0,this.uniqueAxes=i?i.slice():null,this.uniqueEdges=[],this.computeEdges()}computeEdges(){const t=this.faces,e=this.vertices,s=this.uniqueEdges;s.length=0;const n=new h;for(let i=0;i!==t.length;i++){const r=t[i],c=r.length;for(let o=0;o!==c;o++){const a=(o+1)%c;e[r[o]].vsub(e[r[a]],n),n.normalize();let u=!1;for(let d=0;d!==s.length;d++)if(s[d].almostEquals(n)||s[d].almostEquals(n)){u=!0;break}u||s.push(n.clone())}}}computeNormals(){this.faceNormals.length=this.faces.length;for(let t=0;t<this.faces.length;t++){for(let n=0;n<this.faces[t].length;n++)if(!this.vertices[this.faces[t][n]])throw new Error(`Vertex ${this.faces[t][n]} not found!`);const e=this.faceNormals[t]||new h;this.getFaceNormal(t,e),e.negate(e),this.faceNormals[t]=e;const s=this.vertices[this.faces[t][0]];if(e.dot(s)<0){console.error(`.faceNormals[${t}] = Vec3(${e.toString()}) looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.`);for(let n=0;n<this.faces[t].length;n++)console.warn(`.vertices[${this.faces[t][n]}] = Vec3(${this.vertices[this.faces[t][n]].toString()})`)}}}getFaceNormal(t,e){const s=this.faces[t],n=this.vertices[s[0]],i=this.vertices[s[1]],r=this.vertices[s[2]];ft.computeNormal(n,i,r,e)}static computeNormal(t,e,s,n){const i=new h,r=new h;e.vsub(t,r),s.vsub(e,i),i.cross(r,n),n.isZero()||n.normalize()}clipAgainstHull(t,e,s,n,i,r,c,o,a){const u=new h;let d=-1,l=-Number.MAX_VALUE;for(let p=0;p<s.faces.length;p++){u.copy(s.faceNormals[p]),i.vmult(u,u);const m=u.dot(r);m>l&&(l=m,d=p)}const f=[];for(let p=0;p<s.faces[d].length;p++){const m=s.vertices[s.faces[d][p]],v=new h;v.copy(m),i.vmult(v,v),n.vadd(v,v),f.push(v)}d>=0&&this.clipFaceAgainstHull(r,t,e,f,c,o,a)}findSeparatingAxis(t,e,s,n,i,r,c,o){const a=new h,u=new h,d=new h,l=new h,f=new h,p=new h;let m=Number.MAX_VALUE;const v=this;if(v.uniqueAxes)for(let g=0;g!==v.uniqueAxes.length;g++){s.vmult(v.uniqueAxes[g],a);const y=v.testSepAxis(a,t,e,s,n,i);if(y===!1)return!1;y<m&&(m=y,r.copy(a))}else{const g=c?c.length:v.faces.length;for(let y=0;y<g;y++){const E=c?c[y]:y;a.copy(v.faceNormals[E]),s.vmult(a,a);const S=v.testSepAxis(a,t,e,s,n,i);if(S===!1)return!1;S<m&&(m=S,r.copy(a))}}if(t.uniqueAxes)for(let g=0;g!==t.uniqueAxes.length;g++){i.vmult(t.uniqueAxes[g],u);const y=v.testSepAxis(u,t,e,s,n,i);if(y===!1)return!1;y<m&&(m=y,r.copy(u))}else{const g=o?o.length:t.faces.length;for(let y=0;y<g;y++){const E=o?o[y]:y;u.copy(t.faceNormals[E]),i.vmult(u,u);const S=v.testSepAxis(u,t,e,s,n,i);if(S===!1)return!1;S<m&&(m=S,r.copy(u))}}for(let g=0;g!==v.uniqueEdges.length;g++){s.vmult(v.uniqueEdges[g],l);for(let y=0;y!==t.uniqueEdges.length;y++)if(i.vmult(t.uniqueEdges[y],f),l.cross(f,p),!p.almostZero()){p.normalize();const E=v.testSepAxis(p,t,e,s,n,i);if(E===!1)return!1;E<m&&(m=E,r.copy(p))}}return n.vsub(e,d),d.dot(r)>0&&r.negate(r),!0}testSepAxis(t,e,s,n,i,r){const c=this;ft.project(c,t,s,n,Zt),ft.project(e,t,i,r,Kt);const o=Zt[0],a=Zt[1],u=Kt[0],d=Kt[1];if(o<d||u<a)return!1;const l=o-d,f=u-a;return l<f?l:f}calculateLocalInertia(t,e){const s=new h,n=new h;this.computeLocalAABB(n,s);const i=s.x-n.x,r=s.y-n.y,c=s.z-n.z;e.x=1/12*t*(2*r*2*r+2*c*2*c),e.y=1/12*t*(2*i*2*i+2*c*2*c),e.z=1/12*t*(2*r*2*r+2*i*2*i)}getPlaneConstantOfFace(t){const e=this.faces[t],s=this.faceNormals[t],n=this.vertices[e[0]];return-s.dot(n)}clipFaceAgainstHull(t,e,s,n,i,r,c){const o=new h,a=new h,u=new h,d=new h,l=new h,f=new h,p=new h,m=new h,v=this,g=[],y=n,E=g;let S=-1,x=Number.MAX_VALUE;for(let F=0;F<v.faces.length;F++){o.copy(v.faceNormals[F]),s.vmult(o,o);const R=o.dot(t);R<x&&(x=R,S=F)}if(S<0)return;const I=v.faces[S];I.connectedFaces=[];for(let F=0;F<v.faces.length;F++)for(let R=0;R<v.faces[F].length;R++)I.indexOf(v.faces[F][R])!==-1&&F!==S&&I.connectedFaces.indexOf(F)===-1&&I.connectedFaces.push(F);const P=I.length;for(let F=0;F<P;F++){const R=v.vertices[I[F]],N=v.vertices[I[(F+1)%P]];R.vsub(N,a),u.copy(a),s.vmult(u,u),e.vadd(u,u),d.copy(this.faceNormals[S]),s.vmult(d,d),e.vadd(d,d),u.cross(d,l),l.negate(l),f.copy(R),s.vmult(f,f),e.vadd(f,f);const b=I.connectedFaces[F];p.copy(this.faceNormals[b]);const M=this.getPlaneConstantOfFace(b);m.copy(p),s.vmult(m,m);const A=M-m.dot(e);for(this.clipFaceAgainstPlane(y,E,m,A);y.length;)y.shift();for(;E.length;)y.push(E.shift())}p.copy(this.faceNormals[S]);const C=this.getPlaneConstantOfFace(S);m.copy(p),s.vmult(m,m);const z=C-m.dot(e);for(let F=0;F<y.length;F++){let R=m.dot(y[F])+z;if(R<=i&&(console.log(`clamped: depth=${R} to minDist=${i}`),R=i),R<=r){const N=y[F];if(R<=1e-6){const b={point:N,normal:m,depth:R};c.push(b)}}}}clipFaceAgainstPlane(t,e,s,n){let i,r;const c=t.length;if(c<2)return e;let o=t[t.length-1],a=t[0];i=s.dot(o)+n;for(let u=0;u<c;u++){if(a=t[u],r=s.dot(a)+n,i<0)if(r<0){const d=new h;d.copy(a),e.push(d)}else{const d=new h;o.lerp(a,i/(i-r),d),e.push(d)}else if(r<0){const d=new h;o.lerp(a,i/(i-r),d),e.push(d),e.push(a)}o=a,i=r}return e}computeWorldVertices(t,e){for(;this.worldVertices.length<this.vertices.length;)this.worldVertices.push(new h);const s=this.vertices,n=this.worldVertices;for(let i=0;i!==this.vertices.length;i++)e.vmult(s[i],n[i]),t.vadd(n[i],n[i]);this.worldVerticesNeedsUpdate=!1}computeLocalAABB(t,e){const s=this.vertices;t.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),e.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE);for(let n=0;n<this.vertices.length;n++){const i=s[n];i.x<t.x?t.x=i.x:i.x>e.x&&(e.x=i.x),i.y<t.y?t.y=i.y:i.y>e.y&&(e.y=i.y),i.z<t.z?t.z=i.z:i.z>e.z&&(e.z=i.z)}}computeWorldFaceNormals(t){const e=this.faceNormals.length;for(;this.worldFaceNormals.length<e;)this.worldFaceNormals.push(new h);const s=this.faceNormals,n=this.worldFaceNormals;for(let i=0;i!==e;i++)t.vmult(s[i],n[i]);this.worldFaceNormalsNeedsUpdate=!1}updateBoundingSphereRadius(){let t=0;const e=this.vertices;for(let s=0;s!==e.length;s++){const n=e[s].lengthSquared();n>t&&(t=n)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,s,n){const i=this.vertices;let r,c,o,a,u,d,l=new h;for(let f=0;f<i.length;f++){l.copy(i[f]),e.vmult(l,l),t.vadd(l,l);const p=l;(r===void 0||p.x<r)&&(r=p.x),(a===void 0||p.x>a)&&(a=p.x),(c===void 0||p.y<c)&&(c=p.y),(u===void 0||p.y>u)&&(u=p.y),(o===void 0||p.z<o)&&(o=p.z),(d===void 0||p.z>d)&&(d=p.z)}s.set(r,c,o),n.set(a,u,d)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}getAveragePointLocal(t){t===void 0&&(t=new h);const e=this.vertices;for(let s=0;s<e.length;s++)t.vadd(e[s],t);return t.scale(1/e.length,t),t}transformAllPoints(t,e){const s=this.vertices.length,n=this.vertices;if(e){for(let i=0;i<s;i++){const r=n[i];e.vmult(r,r)}for(let i=0;i<this.faceNormals.length;i++){const r=this.faceNormals[i];e.vmult(r,r)}}if(t)for(let i=0;i<s;i++){const r=n[i];r.vadd(t,r)}}pointIsInside(t){const e=this.vertices,s=this.faces,n=this.faceNormals,i=null,r=new h;this.getAveragePointLocal(r);for(let c=0;c<this.faces.length;c++){let o=n[c];const a=e[s[c][0]],u=new h;t.vsub(a,u);const d=o.dot(u),l=new h;r.vsub(a,l);const f=o.dot(l);if(d<0&&f>0||d>0&&f<0)return!1}return i?1:-1}static project(t,e,s,n,i){const r=t.vertices.length,c=js;let o=0,a=0;const u=Hs,d=t.vertices;u.setZero(),O.vectorToLocalFrame(s,n,e,c),O.pointToLocalFrame(s,n,u,u);const l=u.dot(c);a=o=d[0].dot(c);for(let f=1;f<r;f++){const p=d[f].dot(c);p>o&&(o=p),p<a&&(a=p)}if(a-=l,o-=l,a>o){const f=a;a=o,o=f}i[0]=o,i[1]=a}}const Zt=[],Kt=[];new h;const js=new h,Hs=new h;class mt extends T{constructor(t){super({type:T.types.BOX}),this.halfExtents=t,this.convexPolyhedronRepresentation=null,this.updateConvexPolyhedronRepresentation(),this.updateBoundingSphereRadius()}updateConvexPolyhedronRepresentation(){const t=this.halfExtents.x,e=this.halfExtents.y,s=this.halfExtents.z,n=h,i=[new n(-t,-e,-s),new n(t,-e,-s),new n(t,e,-s),new n(-t,e,-s),new n(-t,-e,s),new n(t,-e,s),new n(t,e,s),new n(-t,e,s)],r=[[3,2,1,0],[4,5,6,7],[5,4,0,1],[2,3,7,6],[0,4,7,3],[1,2,6,5]],c=[new n(0,0,1),new n(0,1,0),new n(1,0,0)],o=new ft({vertices:i,faces:r,axes:c});this.convexPolyhedronRepresentation=o,o.material=this.material}calculateLocalInertia(t,e){return e===void 0&&(e=new h),mt.calculateInertia(this.halfExtents,t,e),e}static calculateInertia(t,e,s){const n=t;s.x=1/12*e*(2*n.y*2*n.y+2*n.z*2*n.z),s.y=1/12*e*(2*n.x*2*n.x+2*n.z*2*n.z),s.z=1/12*e*(2*n.y*2*n.y+2*n.x*2*n.x)}getSideNormals(t,e){const s=t,n=this.halfExtents;if(s[0].set(n.x,0,0),s[1].set(0,n.y,0),s[2].set(0,0,n.z),s[3].set(-n.x,0,0),s[4].set(0,-n.y,0),s[5].set(0,0,-n.z),e!==void 0)for(let i=0;i!==s.length;i++)e.vmult(s[i],s[i]);return s}volume(){return 8*this.halfExtents.x*this.halfExtents.y*this.halfExtents.z}updateBoundingSphereRadius(){this.boundingSphereRadius=this.halfExtents.length()}forEachWorldCorner(t,e,s){const n=this.halfExtents,i=[[n.x,n.y,n.z],[-n.x,n.y,n.z],[-n.x,-n.y,n.z],[-n.x,-n.y,-n.z],[n.x,-n.y,-n.z],[n.x,n.y,-n.z],[-n.x,n.y,-n.z],[n.x,-n.y,n.z]];for(let r=0;r<i.length;r++)lt.set(i[r][0],i[r][1],i[r][2]),e.vmult(lt,lt),t.vadd(lt,lt),s(lt.x,lt.y,lt.z)}calculateWorldAABB(t,e,s,n){const i=this.halfExtents;et[0].set(i.x,i.y,i.z),et[1].set(-i.x,i.y,i.z),et[2].set(-i.x,-i.y,i.z),et[3].set(-i.x,-i.y,-i.z),et[4].set(i.x,-i.y,-i.z),et[5].set(i.x,i.y,-i.z),et[6].set(-i.x,i.y,-i.z),et[7].set(i.x,-i.y,i.z);const r=et[0];e.vmult(r,r),t.vadd(r,r),n.copy(r),s.copy(r);for(let c=1;c<8;c++){const o=et[c];e.vmult(o,o),t.vadd(o,o);const a=o.x,u=o.y,d=o.z;a>n.x&&(n.x=a),u>n.y&&(n.y=u),d>n.z&&(n.z=d),a<s.x&&(s.x=a),u<s.y&&(s.y=u),d<s.z&&(s.z=d)}}}const lt=new h,et=[new h,new h,new h,new h,new h,new h,new h,new h],oe={DYNAMIC:1,STATIC:2,KINEMATIC:4},re={AWAKE:0,SLEEPY:1,SLEEPING:2};class _ extends ts{constructor(t){t===void 0&&(t={}),super(),this.id=_.idCounter++,this.index=-1,this.world=null,this.vlambda=new h,this.collisionFilterGroup=typeof t.collisionFilterGroup=="number"?t.collisionFilterGroup:1,this.collisionFilterMask=typeof t.collisionFilterMask=="number"?t.collisionFilterMask:-1,this.collisionResponse=typeof t.collisionResponse=="boolean"?t.collisionResponse:!0,this.position=new h,this.previousPosition=new h,this.interpolatedPosition=new h,this.initPosition=new h,t.position&&(this.position.copy(t.position),this.previousPosition.copy(t.position),this.interpolatedPosition.copy(t.position),this.initPosition.copy(t.position)),this.velocity=new h,t.velocity&&this.velocity.copy(t.velocity),this.initVelocity=new h,this.force=new h;const e=typeof t.mass=="number"?t.mass:0;this.mass=e,this.invMass=e>0?1/e:0,this.material=t.material||null,this.linearDamping=typeof t.linearDamping=="number"?t.linearDamping:.01,this.type=e<=0?_.STATIC:_.DYNAMIC,typeof t.type==typeof _.STATIC&&(this.type=t.type),this.allowSleep=typeof t.allowSleep<"u"?t.allowSleep:!0,this.sleepState=_.AWAKE,this.sleepSpeedLimit=typeof t.sleepSpeedLimit<"u"?t.sleepSpeedLimit:.1,this.sleepTimeLimit=typeof t.sleepTimeLimit<"u"?t.sleepTimeLimit:1,this.timeLastSleepy=0,this.wakeUpAfterNarrowphase=!1,this.torque=new h,this.quaternion=new H,this.initQuaternion=new H,this.previousQuaternion=new H,this.interpolatedQuaternion=new H,t.quaternion&&(this.quaternion.copy(t.quaternion),this.initQuaternion.copy(t.quaternion),this.previousQuaternion.copy(t.quaternion),this.interpolatedQuaternion.copy(t.quaternion)),this.angularVelocity=new h,t.angularVelocity&&this.angularVelocity.copy(t.angularVelocity),this.initAngularVelocity=new h,this.shapes=[],this.shapeOffsets=[],this.shapeOrientations=[],this.inertia=new h,this.invInertia=new h,this.invInertiaWorld=new tt,this.invMassSolve=0,this.invInertiaSolve=new h,this.invInertiaWorldSolve=new tt,this.fixedRotation=typeof t.fixedRotation<"u"?t.fixedRotation:!1,this.angularDamping=typeof t.angularDamping<"u"?t.angularDamping:.01,this.linearFactor=new h(1,1,1),t.linearFactor&&this.linearFactor.copy(t.linearFactor),this.angularFactor=new h(1,1,1),t.angularFactor&&this.angularFactor.copy(t.angularFactor),this.aabb=new G,this.aabbNeedsUpdate=!0,this.boundingRadius=0,this.wlambda=new h,this.isTrigger=!!t.isTrigger,t.shape&&this.addShape(t.shape),this.updateMassProperties()}wakeUp(){const t=this.sleepState;this.sleepState=_.AWAKE,this.wakeUpAfterNarrowphase=!1,t===_.SLEEPING&&this.dispatchEvent(_.wakeupEvent)}sleep(){this.sleepState=_.SLEEPING,this.velocity.set(0,0,0),this.angularVelocity.set(0,0,0),this.wakeUpAfterNarrowphase=!1}sleepTick(t){if(this.allowSleep){const e=this.sleepState,s=this.velocity.lengthSquared()+this.angularVelocity.lengthSquared(),n=this.sleepSpeedLimit**2;e===_.AWAKE&&s<n?(this.sleepState=_.SLEEPY,this.timeLastSleepy=t,this.dispatchEvent(_.sleepyEvent)):e===_.SLEEPY&&s>n?this.wakeUp():e===_.SLEEPY&&t-this.timeLastSleepy>this.sleepTimeLimit&&(this.sleep(),this.dispatchEvent(_.sleepEvent))}}updateSolveMassProperties(){this.sleepState===_.SLEEPING||this.type===_.KINEMATIC?(this.invMassSolve=0,this.invInertiaSolve.setZero(),this.invInertiaWorldSolve.setZero()):(this.invMassSolve=this.invMass,this.invInertiaSolve.copy(this.invInertia),this.invInertiaWorldSolve.copy(this.invInertiaWorld))}pointToLocalFrame(t,e){return e===void 0&&(e=new h),t.vsub(this.position,e),this.quaternion.conjugate().vmult(e,e),e}vectorToLocalFrame(t,e){return e===void 0&&(e=new h),this.quaternion.conjugate().vmult(t,e),e}pointToWorldFrame(t,e){return e===void 0&&(e=new h),this.quaternion.vmult(t,e),e.vadd(this.position,e),e}vectorToWorldFrame(t,e){return e===void 0&&(e=new h),this.quaternion.vmult(t,e),e}addShape(t,e,s){const n=new h,i=new H;return e&&n.copy(e),s&&i.copy(s),this.shapes.push(t),this.shapeOffsets.push(n),this.shapeOrientations.push(i),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=this,this}removeShape(t){const e=this.shapes.indexOf(t);return e===-1?(console.warn("Shape does not belong to the body"),this):(this.shapes.splice(e,1),this.shapeOffsets.splice(e,1),this.shapeOrientations.splice(e,1),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=null,this)}updateBoundingRadius(){const t=this.shapes,e=this.shapeOffsets,s=t.length;let n=0;for(let i=0;i!==s;i++){const r=t[i];r.updateBoundingSphereRadius();const c=e[i].length(),o=r.boundingSphereRadius;c+o>n&&(n=c+o)}this.boundingRadius=n}updateAABB(){const t=this.shapes,e=this.shapeOffsets,s=this.shapeOrientations,n=t.length,i=Gs,r=Ds,c=this.quaternion,o=this.aabb,a=Ys;for(let u=0;u!==n;u++){const d=t[u];c.vmult(e[u],i),i.vadd(this.position,i),c.mult(s[u],r),d.calculateWorldAABB(i,r,a.lowerBound,a.upperBound),u===0?o.copy(a):o.extend(a)}this.aabbNeedsUpdate=!1}updateInertiaWorld(t){const e=this.invInertia;if(!(e.x===e.y&&e.y===e.z&&!t)){const s=Xs,n=Us;s.setRotationFromQuaternion(this.quaternion),s.transpose(n),s.scale(e,s),s.mmult(n,this.invInertiaWorld)}}applyForce(t,e){if(e===void 0&&(e=new h),this.type!==_.DYNAMIC)return;this.sleepState===_.SLEEPING&&this.wakeUp();const s=Zs;e.cross(t,s),this.force.vadd(t,this.force),this.torque.vadd(s,this.torque)}applyLocalForce(t,e){if(e===void 0&&(e=new h),this.type!==_.DYNAMIC)return;const s=Ks,n=Qs;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,n),this.applyForce(s,n)}applyTorque(t){this.type===_.DYNAMIC&&(this.sleepState===_.SLEEPING&&this.wakeUp(),this.torque.vadd(t,this.torque))}applyImpulse(t,e){if(e===void 0&&(e=new h),this.type!==_.DYNAMIC)return;this.sleepState===_.SLEEPING&&this.wakeUp();const s=e,n=Js;n.copy(t),n.scale(this.invMass,n),this.velocity.vadd(n,this.velocity);const i=tn;s.cross(t,i),this.invInertiaWorld.vmult(i,i),this.angularVelocity.vadd(i,this.angularVelocity)}applyLocalImpulse(t,e){if(e===void 0&&(e=new h),this.type!==_.DYNAMIC)return;const s=en,n=sn;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,n),this.applyImpulse(s,n)}updateMassProperties(){const t=nn;this.invMass=this.mass>0?1/this.mass:0;const e=this.inertia,s=this.fixedRotation;this.updateAABB(),t.set((this.aabb.upperBound.x-this.aabb.lowerBound.x)/2,(this.aabb.upperBound.y-this.aabb.lowerBound.y)/2,(this.aabb.upperBound.z-this.aabb.lowerBound.z)/2),mt.calculateInertia(t,this.mass,e),this.invInertia.set(e.x>0&&!s?1/e.x:0,e.y>0&&!s?1/e.y:0,e.z>0&&!s?1/e.z:0),this.updateInertiaWorld(!0)}getVelocityAtWorldPoint(t,e){const s=new h;return t.vsub(this.position,s),this.angularVelocity.cross(s,e),this.velocity.vadd(e,e),e}integrate(t,e,s){if(this.previousPosition.copy(this.position),this.previousQuaternion.copy(this.quaternion),!(this.type===_.DYNAMIC||this.type===_.KINEMATIC)||this.sleepState===_.SLEEPING)return;const n=this.velocity,i=this.angularVelocity,r=this.position,c=this.force,o=this.torque,a=this.quaternion,u=this.invMass,d=this.invInertiaWorld,l=this.linearFactor,f=u*t;n.x+=c.x*f*l.x,n.y+=c.y*f*l.y,n.z+=c.z*f*l.z;const p=d.elements,m=this.angularFactor,v=o.x*m.x,g=o.y*m.y,y=o.z*m.z;i.x+=t*(p[0]*v+p[1]*g+p[2]*y),i.y+=t*(p[3]*v+p[4]*g+p[5]*y),i.z+=t*(p[6]*v+p[7]*g+p[8]*y),r.x+=n.x*t,r.y+=n.y*t,r.z+=n.z*t,a.integrate(this.angularVelocity,t,this.angularFactor,a),e&&(s?a.normalizeFast():a.normalize()),this.aabbNeedsUpdate=!0,this.updateInertiaWorld()}}_.idCounter=0;_.COLLIDE_EVENT_NAME="collide";_.DYNAMIC=oe.DYNAMIC;_.STATIC=oe.STATIC;_.KINEMATIC=oe.KINEMATIC;_.AWAKE=re.AWAKE;_.SLEEPY=re.SLEEPY;_.SLEEPING=re.SLEEPING;_.wakeupEvent={type:"wakeup"};_.sleepyEvent={type:"sleepy"};_.sleepEvent={type:"sleep"};const Gs=new h,Ds=new H,Ys=new G,Xs=new tt,Us=new tt,$s=new tt,Zs=new h,Ks=new h,Qs=new h,Js=new h,tn=new h,en=new h,sn=new h,nn=new h;class es{constructor(){this.world=null,this.useBoundingBoxes=!1,this.dirty=!0}collisionPairs(t,e,s){throw new Error("collisionPairs not implemented for this BroadPhase class!")}needBroadphaseCollision(t,e){return!(!(t.collisionFilterGroup&e.collisionFilterMask)||!(e.collisionFilterGroup&t.collisionFilterMask)||(t.type&_.STATIC||t.sleepState===_.SLEEPING)&&(e.type&_.STATIC||e.sleepState===_.SLEEPING))}intersectionTest(t,e,s,n){this.useBoundingBoxes?this.doBoundingBoxBroadphase(t,e,s,n):this.doBoundingSphereBroadphase(t,e,s,n)}doBoundingSphereBroadphase(t,e,s,n){const i=on;e.position.vsub(t.position,i);const r=(t.boundingRadius+e.boundingRadius)**2;i.lengthSquared()<r&&(s.push(t),n.push(e))}doBoundingBoxBroadphase(t,e,s,n){t.aabbNeedsUpdate&&t.updateAABB(),e.aabbNeedsUpdate&&e.updateAABB(),t.aabb.overlaps(e.aabb)&&(s.push(t),n.push(e))}makePairsUnique(t,e){const s=rn,n=an,i=cn,r=t.length;for(let c=0;c!==r;c++)n[c]=t[c],i[c]=e[c];t.length=0,e.length=0;for(let c=0;c!==r;c++){const o=n[c].id,a=i[c].id,u=o<a?`${o},${a}`:`${a},${o}`;s[u]=c,s.keys.push(u)}for(let c=0;c!==s.keys.length;c++){const o=s.keys.pop(),a=s[o];t.push(n[a]),e.push(i[a]),delete s[o]}}setWorld(t){}static boundingSphereCheck(t,e){const s=new h;t.position.vsub(e.position,s);const n=t.shapes[0],i=e.shapes[0];return Math.pow(n.boundingSphereRadius+i.boundingSphereRadius,2)>s.lengthSquared()}aabbQuery(t,e,s){return console.warn(".aabbQuery is not implemented in this Broadphase subclass."),[]}}const on=new h;new h;new H;new h;const rn={keys:[]},an=[],cn=[];new h;new h;new h;class ln extends es{constructor(){super()}collisionPairs(t,e,s){const n=t.bodies,i=n.length;let r,c;for(let o=0;o!==i;o++)for(let a=0;a!==o;a++)r=n[o],c=n[a],this.needBroadphaseCollision(r,c)&&this.intersectionTest(r,c,e,s)}aabbQuery(t,e,s){s===void 0&&(s=[]);for(let n=0;n<t.bodies.length;n++){const i=t.bodies[n];i.aabbNeedsUpdate&&i.updateAABB(),i.aabb.overlaps(e)&&s.push(i)}return s}}class At{constructor(){this.rayFromWorld=new h,this.rayToWorld=new h,this.hitNormalWorld=new h,this.hitPointWorld=new h,this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}reset(){this.rayFromWorld.setZero(),this.rayToWorld.setZero(),this.hitNormalWorld.setZero(),this.hitPointWorld.setZero(),this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}abort(){this.shouldStop=!0}set(t,e,s,n,i,r,c){this.rayFromWorld.copy(t),this.rayToWorld.copy(e),this.hitNormalWorld.copy(s),this.hitPointWorld.copy(n),this.shape=i,this.body=r,this.distance=c}}let ss,ns,is,os,rs,as,cs;const ae={CLOSEST:1,ANY:2,ALL:4};ss=T.types.SPHERE;ns=T.types.PLANE;is=T.types.BOX;os=T.types.CYLINDER;rs=T.types.CONVEXPOLYHEDRON;as=T.types.HEIGHTFIELD;cs=T.types.TRIMESH;class Y{get[ss](){return this._intersectSphere}get[ns](){return this._intersectPlane}get[is](){return this._intersectBox}get[os](){return this._intersectConvex}get[rs](){return this._intersectConvex}get[as](){return this._intersectHeightfield}get[cs](){return this._intersectTrimesh}constructor(t,e){t===void 0&&(t=new h),e===void 0&&(e=new h),this.from=t.clone(),this.to=e.clone(),this.direction=new h,this.precision=1e-4,this.checkCollisionResponse=!0,this.skipBackfaces=!1,this.collisionFilterMask=-1,this.collisionFilterGroup=-1,this.mode=Y.ANY,this.result=new At,this.hasHit=!1,this.callback=s=>{}}intersectWorld(t,e){return this.mode=e.mode||Y.ANY,this.result=e.result||new At,this.skipBackfaces=!!e.skipBackfaces,this.collisionFilterMask=typeof e.collisionFilterMask<"u"?e.collisionFilterMask:-1,this.collisionFilterGroup=typeof e.collisionFilterGroup<"u"?e.collisionFilterGroup:-1,this.checkCollisionResponse=typeof e.checkCollisionResponse<"u"?e.checkCollisionResponse:!0,e.from&&this.from.copy(e.from),e.to&&this.to.copy(e.to),this.callback=e.callback||(()=>{}),this.hasHit=!1,this.result.reset(),this.updateDirection(),this.getAABB(ye),Qt.length=0,t.broadphase.aabbQuery(t,ye,Qt),this.intersectBodies(Qt),this.hasHit}intersectBody(t,e){e&&(this.result=e,this.updateDirection());const s=this.checkCollisionResponse;if(s&&!t.collisionResponse||!(this.collisionFilterGroup&t.collisionFilterMask)||!(t.collisionFilterGroup&this.collisionFilterMask))return;const n=hn,i=un;for(let r=0,c=t.shapes.length;r<c;r++){const o=t.shapes[r];if(!(s&&!o.collisionResponse)&&(t.quaternion.mult(t.shapeOrientations[r],i),t.quaternion.vmult(t.shapeOffsets[r],n),n.vadd(t.position,n),this.intersectShape(o,i,n,t),this.result.shouldStop))break}}intersectBodies(t,e){e&&(this.result=e,this.updateDirection());for(let s=0,n=t.length;!this.result.shouldStop&&s<n;s++)this.intersectBody(t[s])}updateDirection(){this.to.vsub(this.from,this.direction),this.direction.normalize()}intersectShape(t,e,s,n){const i=this.from;if(Sn(i,this.direction,s)>t.boundingSphereRadius)return;const c=this[t.type];c&&c.call(this,t,e,s,n,t)}_intersectBox(t,e,s,n,i){return this._intersectConvex(t.convexPolyhedronRepresentation,e,s,n,i)}_intersectPlane(t,e,s,n,i){const r=this.from,c=this.to,o=this.direction,a=new h(0,0,1);e.vmult(a,a);const u=new h;r.vsub(s,u);const d=u.dot(a);c.vsub(s,u);const l=u.dot(a);if(d*l>0||r.distanceTo(c)<d)return;const f=a.dot(o);if(Math.abs(f)<this.precision)return;const p=new h,m=new h,v=new h;r.vsub(s,p);const g=-a.dot(p)/f;o.scale(g,m),r.vadd(m,v),this.reportIntersection(a,v,i,n,-1)}getAABB(t){const{lowerBound:e,upperBound:s}=t,n=this.to,i=this.from;e.x=Math.min(n.x,i.x),e.y=Math.min(n.y,i.y),e.z=Math.min(n.z,i.z),s.x=Math.max(n.x,i.x),s.y=Math.max(n.y,i.y),s.z=Math.max(n.z,i.z)}_intersectHeightfield(t,e,s,n,i){t.data,t.elementSize;const r=dn;r.from.copy(this.from),r.to.copy(this.to),O.pointToLocalFrame(s,e,r.from,r.from),O.pointToLocalFrame(s,e,r.to,r.to),r.updateDirection();const c=pn;let o,a,u,d;o=a=0,u=d=t.data.length-1;const l=new G;r.getAABB(l),t.getIndexOfPosition(l.lowerBound.x,l.lowerBound.y,c,!0),o=Math.max(o,c[0]),a=Math.max(a,c[1]),t.getIndexOfPosition(l.upperBound.x,l.upperBound.y,c,!0),u=Math.min(u,c[0]+1),d=Math.min(d,c[1]+1);for(let f=o;f<u;f++)for(let p=a;p<d;p++){if(this.result.shouldStop)return;if(t.getAabbAtIndex(f,p,l),!!l.overlapsRay(r)){if(t.getConvexTrianglePillar(f,p,!1),O.pointToWorldFrame(s,e,t.pillarOffset,Pt),this._intersectConvex(t.pillarConvex,e,Pt,n,i,ve),this.result.shouldStop)return;t.getConvexTrianglePillar(f,p,!0),O.pointToWorldFrame(s,e,t.pillarOffset,Pt),this._intersectConvex(t.pillarConvex,e,Pt,n,i,ve)}}}_intersectSphere(t,e,s,n,i){const r=this.from,c=this.to,o=t.radius,a=(c.x-r.x)**2+(c.y-r.y)**2+(c.z-r.z)**2,u=2*((c.x-r.x)*(r.x-s.x)+(c.y-r.y)*(r.y-s.y)+(c.z-r.z)*(r.z-s.z)),d=(r.x-s.x)**2+(r.y-s.y)**2+(r.z-s.z)**2-o**2,l=u**2-4*a*d,f=fn,p=mn;if(!(l<0))if(l===0)r.lerp(c,l,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,i,n,-1);else{const m=(-u-Math.sqrt(l))/(2*a),v=(-u+Math.sqrt(l))/(2*a);if(m>=0&&m<=1&&(r.lerp(c,m,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,i,n,-1)),this.result.shouldStop)return;v>=0&&v<=1&&(r.lerp(c,v,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,i,n,-1))}}_intersectConvex(t,e,s,n,i,r){const c=yn,o=we,a=r&&r.faceList||null,u=t.faces,d=t.vertices,l=t.faceNormals,f=this.direction,p=this.from,m=this.to,v=p.distanceTo(m),g=a?a.length:u.length,y=this.result;for(let E=0;!y.shouldStop&&E<g;E++){const S=a?a[E]:E,x=u[S],I=l[S],P=e,C=s;o.copy(d[x[0]]),P.vmult(o,o),o.vadd(C,o),o.vsub(p,o),P.vmult(I,c);const z=f.dot(c);if(Math.abs(z)<this.precision)continue;const F=c.dot(o)/z;if(!(F<0)){f.scale(F,Z),Z.vadd(p,Z),Q.copy(d[x[0]]),P.vmult(Q,Q),C.vadd(Q,Q);for(let R=1;!y.shouldStop&&R<x.length-1;R++){st.copy(d[x[R]]),nt.copy(d[x[R+1]]),P.vmult(st,st),P.vmult(nt,nt),C.vadd(st,st),C.vadd(nt,nt);const N=Z.distanceTo(p);!(Y.pointInTriangle(Z,Q,st,nt)||Y.pointInTriangle(Z,st,Q,nt))||N>v||this.reportIntersection(c,Z,i,n,S)}}}}_intersectTrimesh(t,e,s,n,i,r){const c=vn,o=Cn,a=Bn,u=we,d=wn,l=gn,f=xn,p=En,m=bn,v=t.indices;t.vertices;const g=this.from,y=this.to,E=this.direction;a.position.copy(s),a.quaternion.copy(e),O.vectorToLocalFrame(s,e,E,d),O.pointToLocalFrame(s,e,g,l),O.pointToLocalFrame(s,e,y,f),f.x*=t.scale.x,f.y*=t.scale.y,f.z*=t.scale.z,l.x*=t.scale.x,l.y*=t.scale.y,l.z*=t.scale.z,f.vsub(l,d),d.normalize();const S=l.distanceSquared(f);t.tree.rayQuery(this,a,o);for(let x=0,I=o.length;!this.result.shouldStop&&x!==I;x++){const P=o[x];t.getNormal(P,c),t.getVertex(v[P*3],Q),Q.vsub(l,u);const C=d.dot(c),z=c.dot(u)/C;if(z<0)continue;d.scale(z,Z),Z.vadd(l,Z),t.getVertex(v[P*3+1],st),t.getVertex(v[P*3+2],nt);const F=Z.distanceSquared(l);!(Y.pointInTriangle(Z,st,Q,nt)||Y.pointInTriangle(Z,Q,st,nt))||F>S||(O.vectorToWorldFrame(e,c,m),O.pointToWorldFrame(s,e,Z,p),this.reportIntersection(m,p,i,n,P))}o.length=0}reportIntersection(t,e,s,n,i){const r=this.from,c=this.to,o=r.distanceTo(e),a=this.result;if(!(this.skipBackfaces&&t.dot(this.direction)>0))switch(a.hitFaceIndex=typeof i<"u"?i:-1,this.mode){case Y.ALL:this.hasHit=!0,a.set(r,c,t,e,s,n,o),a.hasHit=!0,this.callback(a);break;case Y.CLOSEST:(o<a.distance||!a.hasHit)&&(this.hasHit=!0,a.hasHit=!0,a.set(r,c,t,e,s,n,o));break;case Y.ANY:this.hasHit=!0,a.hasHit=!0,a.set(r,c,t,e,s,n,o),a.shouldStop=!0;break}}static pointInTriangle(t,e,s,n){n.vsub(e,pt),s.vsub(e,bt),t.vsub(e,Jt);const i=pt.dot(pt),r=pt.dot(bt),c=pt.dot(Jt),o=bt.dot(bt),a=bt.dot(Jt);let u,d;return(u=o*c-r*a)>=0&&(d=i*a-r*c)>=0&&u+d<i*o-r*r}}Y.CLOSEST=ae.CLOSEST;Y.ANY=ae.ANY;Y.ALL=ae.ALL;const ye=new G,Qt=[],bt=new h,Jt=new h,hn=new h,un=new H,Z=new h,Q=new h,st=new h,nt=new h;new h;new At;const ve={faceList:[0]},Pt=new h,dn=new Y,pn=[],fn=new h,mn=new h,yn=new h;new h;new h;const we=new h,vn=new h,wn=new h,gn=new h,xn=new h,bn=new h,En=new h;new G;const Cn=[],Bn=new O,pt=new h,Rt=new h;function Sn(w,t,e){e.vsub(w,pt);const s=pt.dot(t);return t.scale(s,Rt),Rt.vadd(w,Rt),e.distanceTo(Rt)}class xt extends es{static checkBounds(t,e,s){let n,i;s===0?(n=t.position.x,i=e.position.x):s===1?(n=t.position.y,i=e.position.y):s===2&&(n=t.position.z,i=e.position.z);const r=t.boundingRadius,c=e.boundingRadius,o=n+r;return i-c<o}static insertionSortX(t){for(let e=1,s=t.length;e<s;e++){const n=t[e];let i;for(i=e-1;i>=0&&!(t[i].aabb.lowerBound.x<=n.aabb.lowerBound.x);i--)t[i+1]=t[i];t[i+1]=n}return t}static insertionSortY(t){for(let e=1,s=t.length;e<s;e++){const n=t[e];let i;for(i=e-1;i>=0&&!(t[i].aabb.lowerBound.y<=n.aabb.lowerBound.y);i--)t[i+1]=t[i];t[i+1]=n}return t}static insertionSortZ(t){for(let e=1,s=t.length;e<s;e++){const n=t[e];let i;for(i=e-1;i>=0&&!(t[i].aabb.lowerBound.z<=n.aabb.lowerBound.z);i--)t[i+1]=t[i];t[i+1]=n}return t}constructor(t){super(),this.axisList=[],this.world=null,this.axisIndex=0;const e=this.axisList;this._addBodyHandler=s=>{e.push(s.body)},this._removeBodyHandler=s=>{const n=e.indexOf(s.body);n!==-1&&e.splice(n,1)},t&&this.setWorld(t)}setWorld(t){this.axisList.length=0;for(let e=0;e<t.bodies.length;e++)this.axisList.push(t.bodies[e]);t.removeEventListener("addBody",this._addBodyHandler),t.removeEventListener("removeBody",this._removeBodyHandler),t.addEventListener("addBody",this._addBodyHandler),t.addEventListener("removeBody",this._removeBodyHandler),this.world=t,this.dirty=!0}collisionPairs(t,e,s){const n=this.axisList,i=n.length,r=this.axisIndex;let c,o;for(this.dirty&&(this.sortList(),this.dirty=!1),c=0;c!==i;c++){const a=n[c];for(o=c+1;o<i;o++){const u=n[o];if(this.needBroadphaseCollision(a,u)){if(!xt.checkBounds(a,u,r))break;this.intersectionTest(a,u,e,s)}}}}sortList(){const t=this.axisList,e=this.axisIndex,s=t.length;for(let n=0;n!==s;n++){const i=t[n];i.aabbNeedsUpdate&&i.updateAABB()}e===0?xt.insertionSortX(t):e===1?xt.insertionSortY(t):e===2&&xt.insertionSortZ(t)}autoDetectAxis(){let t=0,e=0,s=0,n=0,i=0,r=0;const c=this.axisList,o=c.length,a=1/o;for(let f=0;f!==o;f++){const p=c[f],m=p.position.x;t+=m,e+=m*m;const v=p.position.y;s+=v,n+=v*v;const g=p.position.z;i+=g,r+=g*g}const u=e-t*t*a,d=n-s*s*a,l=r-i*i*a;u>d?u>l?this.axisIndex=0:this.axisIndex=2:d>l?this.axisIndex=1:this.axisIndex=2}aabbQuery(t,e,s){s===void 0&&(s=[]),this.dirty&&(this.sortList(),this.dirty=!1);const n=this.axisIndex;let i="x";n===1&&(i="y"),n===2&&(i="z");const r=this.axisList;e.lowerBound[i],e.upperBound[i];for(let c=0;c<r.length;c++){const o=r[c];o.aabbNeedsUpdate&&o.updateAABB(),o.aabb.overlaps(e)&&s.push(o)}return s}}class ls{static defaults(t,e){t===void 0&&(t={});for(let s in e)s in t||(t[s]=e[s]);return t}}class ge{constructor(){this.spatial=new h,this.rotational=new h}multiplyElement(t){return t.spatial.dot(this.spatial)+t.rotational.dot(this.rotational)}multiplyVectors(t,e){return t.dot(this.spatial)+e.dot(this.rotational)}}class It{constructor(t,e,s,n){s===void 0&&(s=-1e6),n===void 0&&(n=1e6),this.id=It.idCounter++,this.minForce=s,this.maxForce=n,this.bi=t,this.bj=e,this.a=0,this.b=0,this.eps=0,this.jacobianElementA=new ge,this.jacobianElementB=new ge,this.enabled=!0,this.multiplier=0,this.setSpookParams(1e7,4,1/60)}setSpookParams(t,e,s){const n=e,i=t,r=s;this.a=4/(r*(1+4*n)),this.b=4*n/(1+4*n),this.eps=4/(r*r*i*(1+4*n))}computeB(t,e,s){const n=this.computeGW(),i=this.computeGq(),r=this.computeGiMf();return-i*t-n*e-r*s}computeGq(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.position,r=n.position;return t.spatial.dot(i)+e.spatial.dot(r)}computeGW(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.velocity,r=n.velocity,c=s.angularVelocity,o=n.angularVelocity;return t.multiplyVectors(i,c)+e.multiplyVectors(r,o)}computeGWlambda(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.vlambda,r=n.vlambda,c=s.wlambda,o=n.wlambda;return t.multiplyVectors(i,c)+e.multiplyVectors(r,o)}computeGiMf(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.force,r=s.torque,c=n.force,o=n.torque,a=s.invMassSolve,u=n.invMassSolve;return i.scale(a,xe),c.scale(u,be),s.invInertiaWorldSolve.vmult(r,Ee),n.invInertiaWorldSolve.vmult(o,Ce),t.multiplyVectors(xe,Ee)+e.multiplyVectors(be,Ce)}computeGiMGt(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.invMassSolve,r=n.invMassSolve,c=s.invInertiaWorldSolve,o=n.invInertiaWorldSolve;let a=i+r;return c.vmult(t.rotational,Tt),a+=Tt.dot(t.rotational),o.vmult(e.rotational,Tt),a+=Tt.dot(e.rotational),a}addToWlambda(t){const e=this.jacobianElementA,s=this.jacobianElementB,n=this.bi,i=this.bj,r=zn;n.vlambda.addScaledVector(n.invMassSolve*t,e.spatial,n.vlambda),i.vlambda.addScaledVector(i.invMassSolve*t,s.spatial,i.vlambda),n.invInertiaWorldSolve.vmult(e.rotational,r),n.wlambda.addScaledVector(t,r,n.wlambda),i.invInertiaWorldSolve.vmult(s.rotational,r),i.wlambda.addScaledVector(t,r,i.wlambda)}computeC(){return this.computeGiMGt()+this.eps}}It.idCounter=0;const xe=new h,be=new h,Ee=new h,Ce=new h,Tt=new h,zn=new h;class An extends It{constructor(t,e,s){s===void 0&&(s=1e6),super(t,e,0,s),this.restitution=0,this.ri=new h,this.rj=new h,this.ni=new h}computeB(t){const e=this.a,s=this.b,n=this.bi,i=this.bj,r=this.ri,c=this.rj,o=In,a=Mn,u=n.velocity,d=n.angularVelocity;n.force,n.torque;const l=i.velocity,f=i.angularVelocity;i.force,i.torque;const p=Fn,m=this.jacobianElementA,v=this.jacobianElementB,g=this.ni;r.cross(g,o),c.cross(g,a),g.negate(m.spatial),o.negate(m.rotational),v.spatial.copy(g),v.rotational.copy(a),p.copy(i.position),p.vadd(c,p),p.vsub(n.position,p),p.vsub(r,p);const y=g.dot(p),E=this.restitution+1,S=E*l.dot(g)-E*u.dot(g)+f.dot(a)-d.dot(o),x=this.computeGiMf();return-y*e-S*s-t*x}getImpactVelocityAlongNormal(){const t=Pn,e=Rn,s=Tn,n=Nn,i=_n;return this.bi.position.vadd(this.ri,s),this.bj.position.vadd(this.rj,n),this.bi.getVelocityAtWorldPoint(s,t),this.bj.getVelocityAtWorldPoint(n,e),t.vsub(e,i),this.ni.dot(i)}}const In=new h,Mn=new h,Fn=new h,Pn=new h,Rn=new h,Tn=new h,Nn=new h,_n=new h;new h;new h;new h;new h;new h;new h;new h;new h;new h;new h;class Be extends It{constructor(t,e,s){super(t,e,-s,s),this.ri=new h,this.rj=new h,this.t=new h}computeB(t){this.a;const e=this.b;this.bi,this.bj;const s=this.ri,n=this.rj,i=Ln,r=Wn,c=this.t;s.cross(c,i),n.cross(c,r);const o=this.jacobianElementA,a=this.jacobianElementB;c.negate(o.spatial),i.negate(o.rotational),a.spatial.copy(c),a.rotational.copy(r);const u=this.computeGW(),d=this.computeGiMf();return-u*e-t*d}}const Ln=new h,Wn=new h;class Gt{constructor(t,e,s){s=ls.defaults(s,{friction:.3,restitution:.3,contactEquationStiffness:1e7,contactEquationRelaxation:3,frictionEquationStiffness:1e7,frictionEquationRelaxation:3}),this.id=Gt.idCounter++,this.materials=[t,e],this.friction=s.friction,this.restitution=s.restitution,this.contactEquationStiffness=s.contactEquationStiffness,this.contactEquationRelaxation=s.contactEquationRelaxation,this.frictionEquationStiffness=s.frictionEquationStiffness,this.frictionEquationRelaxation=s.frictionEquationRelaxation}}Gt.idCounter=0;class yt{constructor(t){t===void 0&&(t={});let e="";typeof t=="string"&&(e=t,t={}),this.name=e,this.id=yt.idCounter++,this.friction=typeof t.friction<"u"?t.friction:-1,this.restitution=typeof t.restitution<"u"?t.restitution:-1}}yt.idCounter=0;new h;new h;new h;new h;new h;new h;new h;new h;new h;new h;new h;class Vn{constructor(t){t===void 0&&(t={}),t=ls.defaults(t,{chassisConnectionPointLocal:new h,chassisConnectionPointWorld:new h,directionLocal:new h,directionWorld:new h,axleLocal:new h,axleWorld:new h,suspensionRestLength:1,suspensionMaxLength:2,radius:1,suspensionStiffness:100,dampingCompression:10,dampingRelaxation:10,frictionSlip:10.5,forwardAcceleration:1,sideAcceleration:1,steering:0,rotation:0,deltaRotation:0,rollInfluence:.01,maxSuspensionForce:Number.MAX_VALUE,isFrontWheel:!0,clippedInvContactDotSuspension:1,suspensionRelativeVelocity:0,suspensionForce:0,slipInfo:0,skidInfo:0,suspensionLength:0,maxSuspensionTravel:1,useCustomSlidingRotationalSpeed:!1,customSlidingRotationalSpeed:-.1}),this.maxSuspensionTravel=t.maxSuspensionTravel,this.customSlidingRotationalSpeed=t.customSlidingRotationalSpeed,this.useCustomSlidingRotationalSpeed=t.useCustomSlidingRotationalSpeed,this.sliding=!1,this.chassisConnectionPointLocal=t.chassisConnectionPointLocal.clone(),this.chassisConnectionPointWorld=t.chassisConnectionPointWorld.clone(),this.directionLocal=t.directionLocal.clone(),this.directionWorld=t.directionWorld.clone(),this.axleLocal=t.axleLocal.clone(),this.axleWorld=t.axleWorld.clone(),this.suspensionRestLength=t.suspensionRestLength,this.suspensionMaxLength=t.suspensionMaxLength,this.radius=t.radius,this.suspensionStiffness=t.suspensionStiffness,this.dampingCompression=t.dampingCompression,this.dampingRelaxation=t.dampingRelaxation,this.frictionSlip=t.frictionSlip,this.forwardAcceleration=t.forwardAcceleration,this.sideAcceleration=t.sideAcceleration,this.steering=0,this.rotation=0,this.deltaRotation=0,this.rollInfluence=t.rollInfluence,this.maxSuspensionForce=t.maxSuspensionForce,this.engineForce=0,this.brake=0,this.isFrontWheel=t.isFrontWheel,this.clippedInvContactDotSuspension=1,this.suspensionRelativeVelocity=0,this.suspensionForce=0,this.slipInfo=0,this.skidInfo=0,this.suspensionLength=0,this.sideImpulse=0,this.forwardImpulse=0,this.raycastResult=new At,this.worldTransform=new O,this.isInContact=!1}updateWheel(t){const e=this.raycastResult;if(this.isInContact){const s=e.hitNormalWorld.dot(e.directionWorld);e.hitPointWorld.vsub(t.position,ze),t.getVelocityAtWorldPoint(ze,Se);const n=e.hitNormalWorld.dot(Se);if(s>=-.1)this.suspensionRelativeVelocity=0,this.clippedInvContactDotSuspension=1/.1;else{const i=-1/s;this.suspensionRelativeVelocity=n*i,this.clippedInvContactDotSuspension=i}}else e.suspensionLength=this.suspensionRestLength,this.suspensionRelativeVelocity=0,e.directionWorld.scale(-1,e.hitNormalWorld),this.clippedInvContactDotSuspension=1}}const Se=new h,ze=new h;class qn{constructor(t){this.chassisBody=t.chassisBody,this.wheelInfos=[],this.sliding=!1,this.world=null,this.indexRightAxis=typeof t.indexRightAxis<"u"?t.indexRightAxis:2,this.indexForwardAxis=typeof t.indexForwardAxis<"u"?t.indexForwardAxis:0,this.indexUpAxis=typeof t.indexUpAxis<"u"?t.indexUpAxis:1,this.constraints=[],this.preStepCallback=()=>{},this.currentVehicleSpeedKmHour=0,this.numWheelsOnGround=0}addWheel(t){t===void 0&&(t={});const e=new Vn(t),s=this.wheelInfos.length;return this.wheelInfos.push(e),s}setSteeringValue(t,e){const s=this.wheelInfos[e];s.steering=t}applyEngineForce(t,e){this.wheelInfos[e].engineForce=t}setBrake(t,e){this.wheelInfos[e].brake=t}addToWorld(t){t.addBody(this.chassisBody);const e=this;this.preStepCallback=()=>{e.updateVehicle(t.dt)},t.addEventListener("preStep",this.preStepCallback),this.world=t}getVehicleAxisWorld(t,e){e.set(t===0?1:0,t===1?1:0,t===2?1:0),this.chassisBody.vectorToWorldFrame(e,e)}updateVehicle(t){const e=this.wheelInfos,s=e.length,n=this.chassisBody;for(let d=0;d<s;d++)this.updateWheelTransform(d);this.currentVehicleSpeedKmHour=3.6*n.velocity.length();const i=new h;this.getVehicleAxisWorld(this.indexForwardAxis,i),i.dot(n.velocity)<0&&(this.currentVehicleSpeedKmHour*=-1);for(let d=0;d<s;d++)this.castRay(e[d]);this.updateSuspension(t);const r=new h,c=new h;for(let d=0;d<s;d++){const l=e[d];let f=l.suspensionForce;f>l.maxSuspensionForce&&(f=l.maxSuspensionForce),l.raycastResult.hitNormalWorld.scale(f*t,r),l.raycastResult.hitPointWorld.vsub(n.position,c),n.applyImpulse(r,c)}this.updateFriction(t);const o=new h,a=new h,u=new h;for(let d=0;d<s;d++){const l=e[d];n.getVelocityAtWorldPoint(l.chassisConnectionPointWorld,u);let f=1;switch(this.indexUpAxis){case 1:f=-1;break}if(l.isInContact){this.getVehicleAxisWorld(this.indexForwardAxis,a);const p=a.dot(l.raycastResult.hitNormalWorld);l.raycastResult.hitNormalWorld.scale(p,o),a.vsub(o,a);const m=a.dot(u);l.deltaRotation=f*m*t/l.radius}(l.sliding||!l.isInContact)&&l.engineForce!==0&&l.useCustomSlidingRotationalSpeed&&(l.deltaRotation=(l.engineForce>0?1:-1)*l.customSlidingRotationalSpeed*t),Math.abs(l.brake)>Math.abs(l.engineForce)&&(l.deltaRotation=0),l.rotation+=l.deltaRotation,l.deltaRotation*=.99}}updateSuspension(t){const s=this.chassisBody.mass,n=this.wheelInfos,i=n.length;for(let r=0;r<i;r++){const c=n[r];if(c.isInContact){let o;const a=c.suspensionRestLength,u=c.suspensionLength,d=a-u;o=c.suspensionStiffness*d*c.clippedInvContactDotSuspension;const l=c.suspensionRelativeVelocity;let f;l<0?f=c.dampingCompression:f=c.dampingRelaxation,o-=f*l,c.suspensionForce=o*s,c.suspensionForce<0&&(c.suspensionForce=0)}else c.suspensionForce=0}}removeFromWorld(t){this.constraints,t.removeBody(this.chassisBody),t.removeEventListener("preStep",this.preStepCallback),this.world=null}castRay(t){const e=Hn,s=Gn;this.updateWheelTransformWorld(t);const n=this.chassisBody;let i=-1;const r=t.suspensionRestLength+t.radius;t.directionWorld.scale(r,e);const c=t.chassisConnectionPointWorld;c.vadd(e,s);const o=t.raycastResult;o.reset();const a=n.collisionResponse;n.collisionResponse=!1,this.world.rayTest(c,s,o),n.collisionResponse=a;const u=o.body;if(t.raycastResult.groundObject=0,u){i=o.distance,t.raycastResult.hitNormalWorld=o.hitNormalWorld,t.isInContact=!0;const d=o.distance;t.suspensionLength=d-t.radius;const l=t.suspensionRestLength-t.maxSuspensionTravel,f=t.suspensionRestLength+t.maxSuspensionTravel;t.suspensionLength<l&&(t.suspensionLength=l),t.suspensionLength>f&&(t.suspensionLength=f,t.raycastResult.reset());const p=t.raycastResult.hitNormalWorld.dot(t.directionWorld),m=new h;n.getVelocityAtWorldPoint(t.raycastResult.hitPointWorld,m);const v=t.raycastResult.hitNormalWorld.dot(m);if(p>=-.1)t.suspensionRelativeVelocity=0,t.clippedInvContactDotSuspension=1/.1;else{const g=-1/p;t.suspensionRelativeVelocity=v*g,t.clippedInvContactDotSuspension=g}}else t.suspensionLength=t.suspensionRestLength+0*t.maxSuspensionTravel,t.suspensionRelativeVelocity=0,t.directionWorld.scale(-1,t.raycastResult.hitNormalWorld),t.clippedInvContactDotSuspension=1;return i}updateWheelTransformWorld(t){t.isInContact=!1;const e=this.chassisBody;e.pointToWorldFrame(t.chassisConnectionPointLocal,t.chassisConnectionPointWorld),e.vectorToWorldFrame(t.directionLocal,t.directionWorld),e.vectorToWorldFrame(t.axleLocal,t.axleWorld)}updateWheelTransform(t){const e=kn,s=On,n=jn,i=this.wheelInfos[t];this.updateWheelTransformWorld(i),i.directionLocal.scale(-1,e),s.copy(i.axleLocal),e.cross(s,n),n.normalize(),s.normalize();const r=i.steering,c=new H;c.setFromAxisAngle(e,r);const o=new H;o.setFromAxisAngle(s,i.rotation);const a=i.worldTransform.quaternion;this.chassisBody.quaternion.mult(c,a),a.mult(o,a),a.normalize();const u=i.worldTransform.position;u.copy(i.directionWorld),u.scale(i.suspensionLength,u),u.vadd(i.chassisConnectionPointWorld,u)}getWheelTransformWorld(t){return this.wheelInfos[t].worldTransform}updateFriction(t){const e=Yn,s=this.wheelInfos,n=s.length,i=this.chassisBody,r=Un,c=Xn;this.numWheelsOnGround=0;for(let u=0;u<n;u++){const d=s[u];d.raycastResult.body&&this.numWheelsOnGround++,d.sideImpulse=0,d.forwardImpulse=0,r[u]||(r[u]=new h),c[u]||(c[u]=new h)}for(let u=0;u<n;u++){const d=s[u],l=d.raycastResult.body;if(l){const f=c[u];this.getWheelTransformWorld(u).vectorToWorldFrame(Dn[this.indexRightAxis],f);const m=d.raycastResult.hitNormalWorld,v=f.dot(m);m.scale(v,e),f.vsub(e,f),f.normalize(),m.cross(f,r[u]),r[u].normalize(),d.sideImpulse=ai(i,d.raycastResult.hitPointWorld,l,d.raycastResult.hitPointWorld,f),d.sideImpulse*=$n}}const o=1,a=.5;this.sliding=!1;for(let u=0;u<n;u++){const d=s[u],l=d.raycastResult.body;let f=0;if(d.slipInfo=1,l){const m=d.brake?d.brake:0;f=Jn(i,l,d.raycastResult.hitPointWorld,r[u],m),f+=d.engineForce*t;const v=m/f;d.slipInfo*=v}if(d.forwardImpulse=0,d.skidInfo=1,l){d.skidInfo=1;const p=d.suspensionForce*t*d.frictionSlip,v=p*p;d.forwardImpulse=f;const g=d.forwardImpulse*a/d.forwardAcceleration,y=d.sideImpulse*o/d.sideAcceleration,E=g*g+y*y;if(d.sliding=!1,E>v){this.sliding=!0,d.sliding=!0;const S=p/Math.sqrt(E);d.skidInfo*=S}}}if(this.sliding)for(let u=0;u<n;u++){const d=s[u];d.sideImpulse!==0&&d.skidInfo<1&&(d.forwardImpulse*=d.skidInfo,d.sideImpulse*=d.skidInfo)}for(let u=0;u<n;u++){const d=s[u],l=new h;if(d.raycastResult.hitPointWorld.vsub(i.position,l),d.forwardImpulse!==0){const f=new h;r[u].scale(d.forwardImpulse,f),i.applyImpulse(f,l)}if(d.sideImpulse!==0){const f=d.raycastResult.body,p=new h;d.raycastResult.hitPointWorld.vsub(f.position,p);const m=new h;c[u].scale(d.sideImpulse,m),i.vectorToLocalFrame(l,l),l["xyz"[this.indexUpAxis]]*=d.rollInfluence,i.vectorToWorldFrame(l,l),i.applyImpulse(m,l),m.scale(-1,m),f.applyImpulse(m,p)}}}}new h;new h;new h;const kn=new h,On=new h,jn=new h;new Y;new h;const Hn=new h,Gn=new h,Dn=[new h(1,0,0),new h(0,1,0),new h(0,0,1)],Yn=new h,Xn=[],Un=[],$n=1,Zn=new h,Kn=new h,Qn=new h;function Jn(w,t,e,s,n){let i=0;const r=e,c=Zn,o=Kn,a=Qn;w.getVelocityAtWorldPoint(r,c),t.getVelocityAtWorldPoint(r,o),c.vsub(o,a);const u=s.dot(a),d=Ae(w,e,s),l=Ae(t,e,s),p=1/(d+l);return i=-u*p,n<i&&(i=n),i<-n&&(i=-n),i}const ti=new h,ei=new h,si=new h,ni=new h;function Ae(w,t,e){const s=ti,n=ei,i=si,r=ni;return t.vsub(w.position,s),s.cross(e,n),w.invInertiaWorld.vmult(n,r),r.cross(s,i),w.invMass+e.dot(i)}const ii=new h,oi=new h,ri=new h;function ai(w,t,e,s,n){if(n.lengthSquared()>1.1)return 0;const r=ii,c=oi,o=ri;w.getVelocityAtWorldPoint(t,r),e.getVelocityAtWorldPoint(s,c),r.vsub(c,o);const a=n.dot(o),u=.2,d=1/(w.invMass+e.invMass);return-u*a*d}class ci extends T{constructor(t){if(super({type:T.types.SPHERE}),this.radius=t!==void 0?t:1,this.radius<0)throw new Error("The sphere radius cannot be negative.");this.updateBoundingSphereRadius()}calculateLocalInertia(t,e){e===void 0&&(e=new h);const s=2*t*this.radius*this.radius/5;return e.x=s,e.y=s,e.z=s,e}volume(){return 4*Math.PI*Math.pow(this.radius,3)/3}updateBoundingSphereRadius(){this.boundingSphereRadius=this.radius}calculateWorldAABB(t,e,s,n){const i=this.radius,r=["x","y","z"];for(let c=0;c<r.length;c++){const o=r[c];s[o]=t[o]-i,n[o]=t[o]+i}}}new h;new h;new h;new h;new h;new h;new h;new h;new h;class li extends ft{constructor(t,e,s,n){if(t===void 0&&(t=1),e===void 0&&(e=1),s===void 0&&(s=1),n===void 0&&(n=8),t<0)throw new Error("The cylinder radiusTop cannot be negative.");if(e<0)throw new Error("The cylinder radiusBottom cannot be negative.");const i=n,r=[],c=[],o=[],a=[],u=[],d=Math.cos,l=Math.sin;r.push(new h(-e*l(0),-s*.5,e*d(0))),a.push(0),r.push(new h(-t*l(0),s*.5,t*d(0))),u.push(1);for(let p=0;p<i;p++){const m=2*Math.PI/i*(p+1),v=2*Math.PI/i*(p+.5);p<i-1?(r.push(new h(-e*l(m),-s*.5,e*d(m))),a.push(2*p+2),r.push(new h(-t*l(m),s*.5,t*d(m))),u.push(2*p+3),o.push([2*p,2*p+1,2*p+3,2*p+2])):o.push([2*p,2*p+1,1,0]),(i%2===1||p<i/2)&&c.push(new h(-l(v),0,d(v)))}o.push(a),c.push(new h(0,1,0));const f=[];for(let p=0;p<u.length;p++)f.push(u[u.length-p-1]);o.push(f),super({vertices:r,faces:o,axes:c}),this.type=T.types.CYLINDER,this.radiusTop=t,this.radiusBottom=e,this.height=s,this.numSegments=n}}new h;new h;new h;new h;new h;new h;new h;new h;new h;new h;class it{constructor(t){t===void 0&&(t={}),this.root=t.root||null,this.aabb=t.aabb?t.aabb.clone():new G,this.data=[],this.children=[]}reset(){this.children.length=this.data.length=0}insert(t,e,s){s===void 0&&(s=0);const n=this.data;if(!this.aabb.contains(t))return!1;const i=this.children,r=this.maxDepth||this.root.maxDepth;if(s<r){let c=!1;i.length||(this.subdivide(),c=!0);for(let o=0;o!==8;o++)if(i[o].insert(t,e,s+1))return!0;c&&(i.length=0)}return n.push(e),!0}subdivide(){const t=this.aabb,e=t.lowerBound,s=t.upperBound,n=this.children;n.push(new it({aabb:new G({lowerBound:new h(0,0,0)})}),new it({aabb:new G({lowerBound:new h(1,0,0)})}),new it({aabb:new G({lowerBound:new h(1,1,0)})}),new it({aabb:new G({lowerBound:new h(1,1,1)})}),new it({aabb:new G({lowerBound:new h(0,1,1)})}),new it({aabb:new G({lowerBound:new h(0,0,1)})}),new it({aabb:new G({lowerBound:new h(1,0,1)})}),new it({aabb:new G({lowerBound:new h(0,1,0)})})),s.vsub(e,ht),ht.scale(.5,ht);const i=this.root||this;for(let r=0;r!==8;r++){const c=n[r];c.root=i;const o=c.aabb.lowerBound;o.x*=ht.x,o.y*=ht.y,o.z*=ht.z,o.vadd(e,o),o.vadd(ht,c.aabb.upperBound)}}aabbQuery(t,e){this.data,this.children;const s=[this];for(;s.length;){const n=s.pop();n.aabb.overlaps(t)&&Array.prototype.push.apply(e,n.data),Array.prototype.push.apply(s,n.children)}return e}rayQuery(t,e,s){return t.getAABB(Nt),Nt.toLocalFrame(e,Nt),this.aabbQuery(Nt,s),s}removeEmptyNodes(){for(let t=this.children.length-1;t>=0;t--)this.children[t].removeEmptyNodes(),!this.children[t].children.length&&!this.children[t].data.length&&this.children.splice(t,1)}}class hi extends it{constructor(t,e){e===void 0&&(e={}),super({root:null,aabb:t}),this.maxDepth=typeof e.maxDepth<"u"?e.maxDepth:8}}const ht=new h,Nt=new G;class Ot extends T{constructor(t,e){super({type:T.types.TRIMESH}),this.vertices=new Float32Array(t),this.indices=new Int16Array(e),this.normals=new Float32Array(e.length),this.aabb=new G,this.edges=null,this.scale=new h(1,1,1),this.tree=new hi,this.updateEdges(),this.updateNormals(),this.updateAABB(),this.updateBoundingSphereRadius(),this.updateTree()}updateTree(){const t=this.tree;t.reset(),t.aabb.copy(this.aabb);const e=this.scale;t.aabb.lowerBound.x*=1/e.x,t.aabb.lowerBound.y*=1/e.y,t.aabb.lowerBound.z*=1/e.z,t.aabb.upperBound.x*=1/e.x,t.aabb.upperBound.y*=1/e.y,t.aabb.upperBound.z*=1/e.z;const s=new G,n=new h,i=new h,r=new h,c=[n,i,r];for(let o=0;o<this.indices.length/3;o++){const a=o*3;this._getUnscaledVertex(this.indices[a],n),this._getUnscaledVertex(this.indices[a+1],i),this._getUnscaledVertex(this.indices[a+2],r),s.setFromPoints(c),t.insert(s,o)}t.removeEmptyNodes()}getTrianglesInAABB(t,e){_t.copy(t);const s=this.scale,n=s.x,i=s.y,r=s.z,c=_t.lowerBound,o=_t.upperBound;return c.x/=n,c.y/=i,c.z/=r,o.x/=n,o.y/=i,o.z/=r,this.tree.aabbQuery(_t,e)}setScale(t){const e=this.scale.x===this.scale.y&&this.scale.y===this.scale.z,s=t.x===t.y&&t.y===t.z;e&&s||this.updateNormals(),this.scale.copy(t),this.updateAABB(),this.updateBoundingSphereRadius()}updateNormals(){const t=ui,e=this.normals;for(let s=0;s<this.indices.length/3;s++){const n=s*3,i=this.indices[n],r=this.indices[n+1],c=this.indices[n+2];this.getVertex(i,Fe),this.getVertex(r,Pe),this.getVertex(c,Re),Ot.computeNormal(Pe,Fe,Re,t),e[n]=t.x,e[n+1]=t.y,e[n+2]=t.z}}updateEdges(){const t={},e=(n,i)=>{const r=n<i?`${n}_${i}`:`${i}_${n}`;t[r]=!0};for(let n=0;n<this.indices.length/3;n++){const i=n*3,r=this.indices[i],c=this.indices[i+1],o=this.indices[i+2];e(r,c),e(c,o),e(o,r)}const s=Object.keys(t);this.edges=new Int16Array(s.length*2);for(let n=0;n<s.length;n++){const i=s[n].split("_");this.edges[2*n]=parseInt(i[0],10),this.edges[2*n+1]=parseInt(i[1],10)}}getEdgeVertex(t,e,s){const n=this.edges[t*2+(e?1:0)];this.getVertex(n,s)}getEdgeVector(t,e){const s=di,n=pi;this.getEdgeVertex(t,0,s),this.getEdgeVertex(t,1,n),n.vsub(s,e)}static computeNormal(t,e,s,n){e.vsub(t,Me),s.vsub(e,Ie),Ie.cross(Me,n),n.isZero()||n.normalize()}getVertex(t,e){const s=this.scale;return this._getUnscaledVertex(t,e),e.x*=s.x,e.y*=s.y,e.z*=s.z,e}_getUnscaledVertex(t,e){const s=t*3,n=this.vertices;return e.set(n[s],n[s+1],n[s+2])}getWorldVertex(t,e,s,n){return this.getVertex(t,n),O.pointToWorldFrame(e,s,n,n),n}getTriangleVertices(t,e,s,n){const i=t*3;this.getVertex(this.indices[i],e),this.getVertex(this.indices[i+1],s),this.getVertex(this.indices[i+2],n)}getNormal(t,e){const s=t*3;return e.set(this.normals[s],this.normals[s+1],this.normals[s+2])}calculateLocalInertia(t,e){this.computeLocalAABB(ut);const s=ut.upperBound.x-ut.lowerBound.x,n=ut.upperBound.y-ut.lowerBound.y,i=ut.upperBound.z-ut.lowerBound.z;return e.set(1/12*t*(2*n*2*n+2*i*2*i),1/12*t*(2*s*2*s+2*i*2*i),1/12*t*(2*n*2*n+2*s*2*s))}computeLocalAABB(t){const e=t.lowerBound,s=t.upperBound,n=this.vertices.length;this.vertices;const i=fi;this.getVertex(0,i),e.copy(i),s.copy(i);for(let r=0;r!==n;r++)this.getVertex(r,i),i.x<e.x?e.x=i.x:i.x>s.x&&(s.x=i.x),i.y<e.y?e.y=i.y:i.y>s.y&&(s.y=i.y),i.z<e.z?e.z=i.z:i.z>s.z&&(s.z=i.z)}updateAABB(){this.computeLocalAABB(this.aabb)}updateBoundingSphereRadius(){let t=0;const e=this.vertices,s=new h;for(let n=0,i=e.length/3;n!==i;n++){this.getVertex(n,s);const r=s.lengthSquared();r>t&&(t=r)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,s,n){const i=mi,r=yi;i.position=t,i.quaternion=e,this.aabb.toWorldFrame(i,r),s.copy(r.lowerBound),n.copy(r.upperBound)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}static createTorus(t,e,s,n,i){t===void 0&&(t=1),e===void 0&&(e=.5),s===void 0&&(s=8),n===void 0&&(n=6),i===void 0&&(i=Math.PI*2);const r=[],c=[];for(let o=0;o<=s;o++)for(let a=0;a<=n;a++){const u=a/n*i,d=o/s*Math.PI*2,l=(t+e*Math.cos(d))*Math.cos(u),f=(t+e*Math.cos(d))*Math.sin(u),p=e*Math.sin(d);r.push(l,f,p)}for(let o=1;o<=s;o++)for(let a=1;a<=n;a++){const u=(n+1)*o+a-1,d=(n+1)*(o-1)+a-1,l=(n+1)*(o-1)+a,f=(n+1)*o+a;c.push(u,d,f),c.push(d,l,f)}return new Ot(r,c)}}const ui=new h,_t=new G,di=new h,pi=new h,Ie=new h,Me=new h,Fe=new h,Pe=new h,Re=new h,ut=new G,fi=new h,mi=new O,yi=new G;class vi{constructor(){this.equations=[]}solve(t,e){return 0}addEquation(t){t.enabled&&!t.bi.isTrigger&&!t.bj.isTrigger&&this.equations.push(t)}removeEquation(t){const e=this.equations,s=e.indexOf(t);s!==-1&&e.splice(s,1)}removeAllEquations(){this.equations.length=0}}class wi extends vi{constructor(){super(),this.iterations=10,this.tolerance=1e-7}solve(t,e){let s=0;const n=this.iterations,i=this.tolerance*this.tolerance,r=this.equations,c=r.length,o=e.bodies,a=o.length,u=t;let d,l,f,p,m,v;if(c!==0)for(let S=0;S!==a;S++)o[S].updateSolveMassProperties();const g=xi,y=bi,E=gi;g.length=c,y.length=c,E.length=c;for(let S=0;S!==c;S++){const x=r[S];E[S]=0,y[S]=x.computeB(u),g[S]=1/x.computeC()}if(c!==0){for(let I=0;I!==a;I++){const P=o[I],C=P.vlambda,z=P.wlambda;C.set(0,0,0),z.set(0,0,0)}for(s=0;s!==n;s++){p=0;for(let I=0;I!==c;I++){const P=r[I];d=y[I],l=g[I],v=E[I],m=P.computeGWlambda(),f=l*(d-m-P.eps*v),v+f<P.minForce?f=P.minForce-v:v+f>P.maxForce&&(f=P.maxForce-v),E[I]+=f,p+=f>0?f:-f,P.addToWlambda(f)}if(p*p<i)break}for(let I=0;I!==a;I++){const P=o[I],C=P.velocity,z=P.angularVelocity;P.vlambda.vmul(P.linearFactor,P.vlambda),C.vadd(P.vlambda,C),P.wlambda.vmul(P.angularFactor,P.wlambda),z.vadd(P.wlambda,z)}let S=r.length;const x=1/u;for(;S--;)r[S].multiplier=E[S]*x}return s}}const gi=[],xi=[],bi=[];_.STATIC;class Ei{constructor(){this.objects=[],this.type=Object}release(){const t=arguments.length;for(let e=0;e!==t;e++)this.objects.push(e<0||arguments.length<=e?void 0:arguments[e]);return this}get(){return this.objects.length===0?this.constructObject():this.objects.pop()}constructObject(){throw new Error("constructObject() not implemented in this Pool subclass yet!")}resize(t){const e=this.objects;for(;e.length>t;)e.pop();for(;e.length<t;)e.push(this.constructObject());return this}}class Ci extends Ei{constructor(){super(...arguments),this.type=h}constructObject(){return new h}}const j={sphereSphere:T.types.SPHERE,spherePlane:T.types.SPHERE|T.types.PLANE,boxBox:T.types.BOX|T.types.BOX,sphereBox:T.types.SPHERE|T.types.BOX,planeBox:T.types.PLANE|T.types.BOX,convexConvex:T.types.CONVEXPOLYHEDRON,sphereConvex:T.types.SPHERE|T.types.CONVEXPOLYHEDRON,planeConvex:T.types.PLANE|T.types.CONVEXPOLYHEDRON,boxConvex:T.types.BOX|T.types.CONVEXPOLYHEDRON,sphereHeightfield:T.types.SPHERE|T.types.HEIGHTFIELD,boxHeightfield:T.types.BOX|T.types.HEIGHTFIELD,convexHeightfield:T.types.CONVEXPOLYHEDRON|T.types.HEIGHTFIELD,sphereParticle:T.types.PARTICLE|T.types.SPHERE,planeParticle:T.types.PLANE|T.types.PARTICLE,boxParticle:T.types.BOX|T.types.PARTICLE,convexParticle:T.types.PARTICLE|T.types.CONVEXPOLYHEDRON,cylinderCylinder:T.types.CYLINDER,sphereCylinder:T.types.SPHERE|T.types.CYLINDER,planeCylinder:T.types.PLANE|T.types.CYLINDER,boxCylinder:T.types.BOX|T.types.CYLINDER,convexCylinder:T.types.CONVEXPOLYHEDRON|T.types.CYLINDER,heightfieldCylinder:T.types.HEIGHTFIELD|T.types.CYLINDER,particleCylinder:T.types.PARTICLE|T.types.CYLINDER,sphereTrimesh:T.types.SPHERE|T.types.TRIMESH,planeTrimesh:T.types.PLANE|T.types.TRIMESH};class Bi{get[j.sphereSphere](){return this.sphereSphere}get[j.spherePlane](){return this.spherePlane}get[j.boxBox](){return this.boxBox}get[j.sphereBox](){return this.sphereBox}get[j.planeBox](){return this.planeBox}get[j.convexConvex](){return this.convexConvex}get[j.sphereConvex](){return this.sphereConvex}get[j.planeConvex](){return this.planeConvex}get[j.boxConvex](){return this.boxConvex}get[j.sphereHeightfield](){return this.sphereHeightfield}get[j.boxHeightfield](){return this.boxHeightfield}get[j.convexHeightfield](){return this.convexHeightfield}get[j.sphereParticle](){return this.sphereParticle}get[j.planeParticle](){return this.planeParticle}get[j.boxParticle](){return this.boxParticle}get[j.convexParticle](){return this.convexParticle}get[j.cylinderCylinder](){return this.convexConvex}get[j.sphereCylinder](){return this.sphereConvex}get[j.planeCylinder](){return this.planeConvex}get[j.boxCylinder](){return this.boxConvex}get[j.convexCylinder](){return this.convexConvex}get[j.heightfieldCylinder](){return this.heightfieldCylinder}get[j.particleCylinder](){return this.particleCylinder}get[j.sphereTrimesh](){return this.sphereTrimesh}get[j.planeTrimesh](){return this.planeTrimesh}constructor(t){this.contactPointPool=[],this.frictionEquationPool=[],this.result=[],this.frictionResult=[],this.v3pool=new Ci,this.world=t,this.currentContactMaterial=t.defaultContactMaterial,this.enableFrictionReduction=!1}createContactEquation(t,e,s,n,i,r){let c;this.contactPointPool.length?(c=this.contactPointPool.pop(),c.bi=t,c.bj=e):c=new An(t,e),c.enabled=t.collisionResponse&&e.collisionResponse&&s.collisionResponse&&n.collisionResponse;const o=this.currentContactMaterial;c.restitution=o.restitution,c.setSpookParams(o.contactEquationStiffness,o.contactEquationRelaxation,this.world.dt);const a=s.material||t.material,u=n.material||e.material;return a&&u&&a.restitution>=0&&u.restitution>=0&&(c.restitution=a.restitution*u.restitution),c.si=i||s,c.sj=r||n,c}createFrictionEquationsFromContact(t,e){const s=t.bi,n=t.bj,i=t.si,r=t.sj,c=this.world,o=this.currentContactMaterial;let a=o.friction;const u=i.material||s.material,d=r.material||n.material;if(u&&d&&u.friction>=0&&d.friction>=0&&(a=u.friction*d.friction),a>0){const l=a*(c.frictionGravity||c.gravity).length();let f=s.invMass+n.invMass;f>0&&(f=1/f);const p=this.frictionEquationPool,m=p.length?p.pop():new Be(s,n,l*f),v=p.length?p.pop():new Be(s,n,l*f);return m.bi=v.bi=s,m.bj=v.bj=n,m.minForce=v.minForce=-l*f,m.maxForce=v.maxForce=l*f,m.ri.copy(t.ri),m.rj.copy(t.rj),v.ri.copy(t.ri),v.rj.copy(t.rj),t.ni.tangents(m.t,v.t),m.setSpookParams(o.frictionEquationStiffness,o.frictionEquationRelaxation,c.dt),v.setSpookParams(o.frictionEquationStiffness,o.frictionEquationRelaxation,c.dt),m.enabled=v.enabled=t.enabled,e.push(m,v),!0}return!1}createFrictionFromAverage(t){let e=this.result[this.result.length-1];if(!this.createFrictionEquationsFromContact(e,this.frictionResult)||t===1)return;const s=this.frictionResult[this.frictionResult.length-2],n=this.frictionResult[this.frictionResult.length-1];dt.setZero(),wt.setZero(),gt.setZero();const i=e.bi;e.bj;for(let c=0;c!==t;c++)e=this.result[this.result.length-1-c],e.bi!==i?(dt.vadd(e.ni,dt),wt.vadd(e.ri,wt),gt.vadd(e.rj,gt)):(dt.vsub(e.ni,dt),wt.vadd(e.rj,wt),gt.vadd(e.ri,gt));const r=1/t;wt.scale(r,s.ri),gt.scale(r,s.rj),n.ri.copy(s.ri),n.rj.copy(s.rj),dt.normalize(),dt.tangents(s.t,n.t)}getContacts(t,e,s,n,i,r,c){this.contactPointPool=i,this.frictionEquationPool=c,this.result=n,this.frictionResult=r;const o=Ai,a=Ii,u=Si,d=zi;for(let l=0,f=t.length;l!==f;l++){const p=t[l],m=e[l];let v=null;p.material&&m.material&&(v=s.getContactMaterial(p.material,m.material)||null);const g=p.type&_.KINEMATIC&&m.type&_.STATIC||p.type&_.STATIC&&m.type&_.KINEMATIC||p.type&_.KINEMATIC&&m.type&_.KINEMATIC;for(let y=0;y<p.shapes.length;y++){p.quaternion.mult(p.shapeOrientations[y],o),p.quaternion.vmult(p.shapeOffsets[y],u),u.vadd(p.position,u);const E=p.shapes[y];for(let S=0;S<m.shapes.length;S++){m.quaternion.mult(m.shapeOrientations[S],a),m.quaternion.vmult(m.shapeOffsets[S],d),d.vadd(m.position,d);const x=m.shapes[S];if(!(E.collisionFilterMask&x.collisionFilterGroup&&x.collisionFilterMask&E.collisionFilterGroup)||u.distanceTo(d)>E.boundingSphereRadius+x.boundingSphereRadius)continue;let I=null;E.material&&x.material&&(I=s.getContactMaterial(E.material,x.material)||null),this.currentContactMaterial=I||v||s.defaultContactMaterial;const P=E.type|x.type,C=this[P];if(C){let z=!1;E.type<x.type?z=C.call(this,E,x,u,d,o,a,p,m,E,x,g):z=C.call(this,x,E,d,u,a,o,m,p,E,x,g),z&&g&&(s.shapeOverlapKeeper.set(E.id,x.id),s.bodyOverlapKeeper.set(p.id,m.id))}}}}}sphereSphere(t,e,s,n,i,r,c,o,a,u,d){if(d)return s.distanceSquared(n)<(t.radius+e.radius)**2;const l=this.createContactEquation(c,o,t,e,a,u);n.vsub(s,l.ni),l.ni.normalize(),l.ri.copy(l.ni),l.rj.copy(l.ni),l.ri.scale(t.radius,l.ri),l.rj.scale(-e.radius,l.rj),l.ri.vadd(s,l.ri),l.ri.vsub(c.position,l.ri),l.rj.vadd(n,l.rj),l.rj.vsub(o.position,l.rj),this.result.push(l),this.createFrictionEquationsFromContact(l,this.frictionResult)}spherePlane(t,e,s,n,i,r,c,o,a,u,d){const l=this.createContactEquation(c,o,t,e,a,u);if(l.ni.set(0,0,1),r.vmult(l.ni,l.ni),l.ni.negate(l.ni),l.ni.normalize(),l.ni.scale(t.radius,l.ri),s.vsub(n,Lt),l.ni.scale(l.ni.dot(Lt),Te),Lt.vsub(Te,l.rj),-Lt.dot(l.ni)<=t.radius){if(d)return!0;const f=l.ri,p=l.rj;f.vadd(s,f),f.vsub(c.position,f),p.vadd(n,p),p.vsub(o.position,p),this.result.push(l),this.createFrictionEquationsFromContact(l,this.frictionResult)}}boxBox(t,e,s,n,i,r,c,o,a,u,d){return t.convexPolyhedronRepresentation.material=t.material,e.convexPolyhedronRepresentation.material=e.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e.convexPolyhedronRepresentation,s,n,i,r,c,o,t,e,d)}sphereBox(t,e,s,n,i,r,c,o,a,u,d){const l=this.v3pool,f=to;s.vsub(n,Wt),e.getSideNormals(f,r);const p=t.radius;let m=!1;const v=so,g=no,y=io;let E=null,S=0,x=0,I=0,P=null;for(let B=0,W=f.length;B!==W&&m===!1;B++){const q=Ki;q.copy(f[B]);const k=q.length();q.normalize();const $=Wt.dot(q);if($<k+p&&$>0){const U=Qi,L=Ji;U.copy(f[(B+1)%3]),L.copy(f[(B+2)%3]);const vt=U.length(),Mt=L.length();U.normalize(),L.normalize();const Dt=Wt.dot(U),Yt=Wt.dot(L);if(Dt<vt&&Dt>-vt&&Yt<Mt&&Yt>-Mt){const ce=Math.abs($-k-p);if((P===null||ce<P)&&(P=ce,x=Dt,I=Yt,E=k,v.copy(q),g.copy(U),y.copy(L),S++,d))return!0}}}if(S){m=!0;const B=this.createContactEquation(c,o,t,e,a,u);v.scale(-p,B.ri),B.ni.copy(v),B.ni.negate(B.ni),v.scale(E,v),g.scale(x,g),v.vadd(g,v),y.scale(I,y),v.vadd(y,B.rj),B.ri.vadd(s,B.ri),B.ri.vsub(c.position,B.ri),B.rj.vadd(n,B.rj),B.rj.vsub(o.position,B.rj),this.result.push(B),this.createFrictionEquationsFromContact(B,this.frictionResult)}let C=l.get();const z=eo;for(let B=0;B!==2&&!m;B++)for(let W=0;W!==2&&!m;W++)for(let q=0;q!==2&&!m;q++)if(C.set(0,0,0),B?C.vadd(f[0],C):C.vsub(f[0],C),W?C.vadd(f[1],C):C.vsub(f[1],C),q?C.vadd(f[2],C):C.vsub(f[2],C),n.vadd(C,z),z.vsub(s,z),z.lengthSquared()<p*p){if(d)return!0;m=!0;const k=this.createContactEquation(c,o,t,e,a,u);k.ri.copy(z),k.ri.normalize(),k.ni.copy(k.ri),k.ri.scale(p,k.ri),k.rj.copy(C),k.ri.vadd(s,k.ri),k.ri.vsub(c.position,k.ri),k.rj.vadd(n,k.rj),k.rj.vsub(o.position,k.rj),this.result.push(k),this.createFrictionEquationsFromContact(k,this.frictionResult)}l.release(C),C=null;const F=l.get(),R=l.get(),N=l.get(),b=l.get(),M=l.get(),A=f.length;for(let B=0;B!==A&&!m;B++)for(let W=0;W!==A&&!m;W++)if(B%3!==W%3){f[W].cross(f[B],F),F.normalize(),f[B].vadd(f[W],R),N.copy(s),N.vsub(R,N),N.vsub(n,N);const q=N.dot(F);F.scale(q,b);let k=0;for(;k===B%3||k===W%3;)k++;M.copy(s),M.vsub(b,M),M.vsub(R,M),M.vsub(n,M);const $=Math.abs(q),U=M.length();if($<f[k].length()&&U<p){if(d)return!0;m=!0;const L=this.createContactEquation(c,o,t,e,a,u);R.vadd(b,L.rj),L.rj.copy(L.rj),M.negate(L.ni),L.ni.normalize(),L.ri.copy(L.rj),L.ri.vadd(n,L.ri),L.ri.vsub(s,L.ri),L.ri.normalize(),L.ri.scale(p,L.ri),L.ri.vadd(s,L.ri),L.ri.vsub(c.position,L.ri),L.rj.vadd(n,L.rj),L.rj.vsub(o.position,L.rj),this.result.push(L),this.createFrictionEquationsFromContact(L,this.frictionResult)}}l.release(F,R,N,b,M)}planeBox(t,e,s,n,i,r,c,o,a,u,d){return e.convexPolyhedronRepresentation.material=e.material,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,e.convexPolyhedronRepresentation.id=e.id,this.planeConvex(t,e.convexPolyhedronRepresentation,s,n,i,r,c,o,t,e,d)}convexConvex(t,e,s,n,i,r,c,o,a,u,d,l,f){const p=xo;if(!(s.distanceTo(n)>t.boundingSphereRadius+e.boundingSphereRadius)&&t.findSeparatingAxis(e,s,i,n,r,p,l,f)){const m=[],v=bo;t.clipAgainstHull(s,i,e,n,r,p,-100,100,m);let g=0;for(let y=0;y!==m.length;y++){if(d)return!0;const E=this.createContactEquation(c,o,t,e,a,u),S=E.ri,x=E.rj;p.negate(E.ni),m[y].normal.negate(v),v.scale(m[y].depth,v),m[y].point.vadd(v,S),x.copy(m[y].point),S.vsub(s,S),x.vsub(n,x),S.vadd(s,S),S.vsub(c.position,S),x.vadd(n,x),x.vsub(o.position,x),this.result.push(E),g++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(E,this.frictionResult)}this.enableFrictionReduction&&g&&this.createFrictionFromAverage(g)}}sphereConvex(t,e,s,n,i,r,c,o,a,u,d){const l=this.v3pool;s.vsub(n,oo);const f=e.faceNormals,p=e.faces,m=e.vertices,v=t.radius;let g=!1;for(let y=0;y!==m.length;y++){const E=m[y],S=lo;r.vmult(E,S),n.vadd(S,S);const x=co;if(S.vsub(s,x),x.lengthSquared()<v*v){if(d)return!0;g=!0;const I=this.createContactEquation(c,o,t,e,a,u);I.ri.copy(x),I.ri.normalize(),I.ni.copy(I.ri),I.ri.scale(v,I.ri),S.vsub(n,I.rj),I.ri.vadd(s,I.ri),I.ri.vsub(c.position,I.ri),I.rj.vadd(n,I.rj),I.rj.vsub(o.position,I.rj),this.result.push(I),this.createFrictionEquationsFromContact(I,this.frictionResult);return}}for(let y=0,E=p.length;y!==E&&g===!1;y++){const S=f[y],x=p[y],I=ho;r.vmult(S,I);const P=uo;r.vmult(m[x[0]],P),P.vadd(n,P);const C=po;I.scale(-v,C),s.vadd(C,C);const z=fo;C.vsub(P,z);const F=z.dot(I),R=mo;if(s.vsub(P,R),F<0&&R.dot(I)>0){const N=[];for(let b=0,M=x.length;b!==M;b++){const A=l.get();r.vmult(m[x[b]],A),n.vadd(A,A),N.push(A)}if(Zi(N,I,s)){if(d)return!0;g=!0;const b=this.createContactEquation(c,o,t,e,a,u);I.scale(-v,b.ri),I.negate(b.ni);const M=l.get();I.scale(-F,M);const A=l.get();I.scale(-v,A),s.vsub(n,b.rj),b.rj.vadd(A,b.rj),b.rj.vadd(M,b.rj),b.rj.vadd(n,b.rj),b.rj.vsub(o.position,b.rj),b.ri.vadd(s,b.ri),b.ri.vsub(c.position,b.ri),l.release(M),l.release(A),this.result.push(b),this.createFrictionEquationsFromContact(b,this.frictionResult);for(let B=0,W=N.length;B!==W;B++)l.release(N[B]);return}else for(let b=0;b!==x.length;b++){const M=l.get(),A=l.get();r.vmult(m[x[(b+1)%x.length]],M),r.vmult(m[x[(b+2)%x.length]],A),n.vadd(M,M),n.vadd(A,A);const B=ro;A.vsub(M,B);const W=ao;B.unit(W);const q=l.get(),k=l.get();s.vsub(M,k);const $=k.dot(W);W.scale($,q),q.vadd(M,q);const U=l.get();if(q.vsub(s,U),$>0&&$*$<B.lengthSquared()&&U.lengthSquared()<v*v){if(d)return!0;const L=this.createContactEquation(c,o,t,e,a,u);q.vsub(n,L.rj),q.vsub(s,L.ni),L.ni.normalize(),L.ni.scale(v,L.ri),L.rj.vadd(n,L.rj),L.rj.vsub(o.position,L.rj),L.ri.vadd(s,L.ri),L.ri.vsub(c.position,L.ri),this.result.push(L),this.createFrictionEquationsFromContact(L,this.frictionResult);for(let vt=0,Mt=N.length;vt!==Mt;vt++)l.release(N[vt]);l.release(M),l.release(A),l.release(q),l.release(U),l.release(k);return}l.release(M),l.release(A),l.release(q),l.release(U),l.release(k)}for(let b=0,M=N.length;b!==M;b++)l.release(N[b])}}}planeConvex(t,e,s,n,i,r,c,o,a,u,d){const l=yo,f=vo;f.set(0,0,1),i.vmult(f,f);let p=0;const m=wo;for(let v=0;v!==e.vertices.length;v++)if(l.copy(e.vertices[v]),r.vmult(l,l),n.vadd(l,l),l.vsub(s,m),f.dot(m)<=0){if(d)return!0;const y=this.createContactEquation(c,o,t,e,a,u),E=go;f.scale(f.dot(m),E),l.vsub(E,E),E.vsub(s,y.ri),y.ni.copy(f),l.vsub(n,y.rj),y.ri.vadd(s,y.ri),y.ri.vsub(c.position,y.ri),y.rj.vadd(n,y.rj),y.rj.vsub(o.position,y.rj),this.result.push(y),p++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(y,this.frictionResult)}this.enableFrictionReduction&&p&&this.createFrictionFromAverage(p)}boxConvex(t,e,s,n,i,r,c,o,a,u,d){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e,s,n,i,r,c,o,t,e,d)}sphereHeightfield(t,e,s,n,i,r,c,o,a,u,d){const l=e.data,f=t.radius,p=e.elementSize,m=To,v=Ro;O.pointToLocalFrame(n,r,s,v);let g=Math.floor((v.x-f)/p)-1,y=Math.ceil((v.x+f)/p)+1,E=Math.floor((v.y-f)/p)-1,S=Math.ceil((v.y+f)/p)+1;if(y<0||S<0||g>l.length||E>l[0].length)return;g<0&&(g=0),y<0&&(y=0),E<0&&(E=0),S<0&&(S=0),g>=l.length&&(g=l.length-1),y>=l.length&&(y=l.length-1),S>=l[0].length&&(S=l[0].length-1),E>=l[0].length&&(E=l[0].length-1);const x=[];e.getRectMinMax(g,E,y,S,x);const I=x[0],P=x[1];if(v.z-f>P||v.z+f<I)return;const C=this.result;for(let z=g;z<y;z++)for(let F=E;F<S;F++){const R=C.length;let N=!1;if(e.getConvexTrianglePillar(z,F,!1),O.pointToWorldFrame(n,r,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(N=this.sphereConvex(t,e.pillarConvex,s,m,i,r,c,o,t,e,d)),d&&N||(e.getConvexTrianglePillar(z,F,!0),O.pointToWorldFrame(n,r,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(N=this.sphereConvex(t,e.pillarConvex,s,m,i,r,c,o,t,e,d)),d&&N))return!0;if(C.length-R>2)return}}boxHeightfield(t,e,s,n,i,r,c,o,a,u,d){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexHeightfield(t.convexPolyhedronRepresentation,e,s,n,i,r,c,o,t,e,d)}convexHeightfield(t,e,s,n,i,r,c,o,a,u,d){const l=e.data,f=e.elementSize,p=t.boundingSphereRadius,m=Fo,v=Po,g=Mo;O.pointToLocalFrame(n,r,s,g);let y=Math.floor((g.x-p)/f)-1,E=Math.ceil((g.x+p)/f)+1,S=Math.floor((g.y-p)/f)-1,x=Math.ceil((g.y+p)/f)+1;if(E<0||x<0||y>l.length||S>l[0].length)return;y<0&&(y=0),E<0&&(E=0),S<0&&(S=0),x<0&&(x=0),y>=l.length&&(y=l.length-1),E>=l.length&&(E=l.length-1),x>=l[0].length&&(x=l[0].length-1),S>=l[0].length&&(S=l[0].length-1);const I=[];e.getRectMinMax(y,S,E,x,I);const P=I[0],C=I[1];if(!(g.z-p>C||g.z+p<P))for(let z=y;z<E;z++)for(let F=S;F<x;F++){let R=!1;if(e.getConvexTrianglePillar(z,F,!1),O.pointToWorldFrame(n,r,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(R=this.convexConvex(t,e.pillarConvex,s,m,i,r,c,o,null,null,d,v,null)),d&&R||(e.getConvexTrianglePillar(z,F,!0),O.pointToWorldFrame(n,r,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(R=this.convexConvex(t,e.pillarConvex,s,m,i,r,c,o,null,null,d,v,null)),d&&R))return!0}}sphereParticle(t,e,s,n,i,r,c,o,a,u,d){const l=So;if(l.set(0,0,1),n.vsub(s,l),l.lengthSquared()<=t.radius*t.radius){if(d)return!0;const p=this.createContactEquation(o,c,e,t,a,u);l.normalize(),p.rj.copy(l),p.rj.scale(t.radius,p.rj),p.ni.copy(l),p.ni.negate(p.ni),p.ri.set(0,0,0),this.result.push(p),this.createFrictionEquationsFromContact(p,this.frictionResult)}}planeParticle(t,e,s,n,i,r,c,o,a,u,d){const l=Eo;l.set(0,0,1),c.quaternion.vmult(l,l);const f=Co;if(n.vsub(c.position,f),l.dot(f)<=0){if(d)return!0;const m=this.createContactEquation(o,c,e,t,a,u);m.ni.copy(l),m.ni.negate(m.ni),m.ri.set(0,0,0);const v=Bo;l.scale(l.dot(n),v),n.vsub(v,v),m.rj.copy(v),this.result.push(m),this.createFrictionEquationsFromContact(m,this.frictionResult)}}boxParticle(t,e,s,n,i,r,c,o,a,u,d){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexParticle(t.convexPolyhedronRepresentation,e,s,n,i,r,c,o,t,e,d)}convexParticle(t,e,s,n,i,r,c,o,a,u,d){let l=-1;const f=Ao,p=Io;let m=null;const v=zo;if(v.copy(n),v.vsub(s,v),i.conjugate(Ne),Ne.vmult(v,v),t.pointIsInside(v)){t.worldVerticesNeedsUpdate&&t.computeWorldVertices(s,i),t.worldFaceNormalsNeedsUpdate&&t.computeWorldFaceNormals(i);for(let g=0,y=t.faces.length;g!==y;g++){const E=[t.worldVertices[t.faces[g][0]]],S=t.worldFaceNormals[g];n.vsub(E[0],_e);const x=-S.dot(_e);if(m===null||Math.abs(x)<Math.abs(m)){if(d)return!0;m=x,l=g,f.copy(S)}}if(l!==-1){const g=this.createContactEquation(o,c,e,t,a,u);f.scale(m,p),p.vadd(n,p),p.vsub(s,p),g.rj.copy(p),f.negate(g.ni),g.ri.set(0,0,0);const y=g.ri,E=g.rj;y.vadd(n,y),y.vsub(o.position,y),E.vadd(s,E),E.vsub(c.position,E),this.result.push(g),this.createFrictionEquationsFromContact(g,this.frictionResult)}else console.warn("Point found inside convex, but did not find penetrating face!")}}heightfieldCylinder(t,e,s,n,i,r,c,o,a,u,d){return this.convexHeightfield(e,t,n,s,r,i,o,c,a,u,d)}particleCylinder(t,e,s,n,i,r,c,o,a,u,d){return this.convexParticle(e,t,n,s,r,i,o,c,a,u,d)}sphereTrimesh(t,e,s,n,i,r,c,o,a,u,d){const l=Li,f=Wi,p=Vi,m=qi,v=ki,g=Oi,y=Di,E=_i,S=Ti,x=Yi;O.pointToLocalFrame(n,r,s,v);const I=t.radius;y.lowerBound.set(v.x-I,v.y-I,v.z-I),y.upperBound.set(v.x+I,v.y+I,v.z+I),e.getTrianglesInAABB(y,x);const P=Ni,C=t.radius*t.radius;for(let b=0;b<x.length;b++)for(let M=0;M<3;M++)if(e.getVertex(e.indices[x[b]*3+M],P),P.vsub(v,S),S.lengthSquared()<=C){if(E.copy(P),O.pointToWorldFrame(n,r,E,P),P.vsub(s,S),d)return!0;let A=this.createContactEquation(c,o,t,e,a,u);A.ni.copy(S),A.ni.normalize(),A.ri.copy(A.ni),A.ri.scale(t.radius,A.ri),A.ri.vadd(s,A.ri),A.ri.vsub(c.position,A.ri),A.rj.copy(P),A.rj.vsub(o.position,A.rj),this.result.push(A),this.createFrictionEquationsFromContact(A,this.frictionResult)}for(let b=0;b<x.length;b++)for(let M=0;M<3;M++){e.getVertex(e.indices[x[b]*3+M],l),e.getVertex(e.indices[x[b]*3+(M+1)%3],f),f.vsub(l,p),v.vsub(f,g);const A=g.dot(p);v.vsub(l,g);let B=g.dot(p);if(B>0&&A<0&&(v.vsub(l,g),m.copy(p),m.normalize(),B=g.dot(m),m.scale(B,g),g.vadd(l,g),g.distanceTo(v)<t.radius)){if(d)return!0;const q=this.createContactEquation(c,o,t,e,a,u);g.vsub(v,q.ni),q.ni.normalize(),q.ni.scale(t.radius,q.ri),q.ri.vadd(s,q.ri),q.ri.vsub(c.position,q.ri),O.pointToWorldFrame(n,r,g,g),g.vsub(o.position,q.rj),O.vectorToWorldFrame(r,q.ni,q.ni),O.vectorToWorldFrame(r,q.ri,q.ri),this.result.push(q),this.createFrictionEquationsFromContact(q,this.frictionResult)}}const z=ji,F=Hi,R=Gi,N=Ri;for(let b=0,M=x.length;b!==M;b++){e.getTriangleVertices(x[b],z,F,R),e.getNormal(x[b],N),v.vsub(z,g);let A=g.dot(N);if(N.scale(A,g),v.vsub(g,g),A=g.distanceTo(v),Y.pointInTriangle(g,z,F,R)&&A<t.radius){if(d)return!0;let B=this.createContactEquation(c,o,t,e,a,u);g.vsub(v,B.ni),B.ni.normalize(),B.ni.scale(t.radius,B.ri),B.ri.vadd(s,B.ri),B.ri.vsub(c.position,B.ri),O.pointToWorldFrame(n,r,g,g),g.vsub(o.position,B.rj),O.vectorToWorldFrame(r,B.ni,B.ni),O.vectorToWorldFrame(r,B.ri,B.ri),this.result.push(B),this.createFrictionEquationsFromContact(B,this.frictionResult)}}x.length=0}planeTrimesh(t,e,s,n,i,r,c,o,a,u,d){const l=new h,f=Mi;f.set(0,0,1),i.vmult(f,f);for(let p=0;p<e.vertices.length/3;p++){e.getVertex(p,l);const m=new h;m.copy(l),O.pointToWorldFrame(n,r,m,l);const v=Fi;if(l.vsub(s,v),f.dot(v)<=0){if(d)return!0;const y=this.createContactEquation(c,o,t,e,a,u);y.ni.copy(f);const E=Pi;f.scale(v.dot(f),E),l.vsub(E,E),y.ri.copy(E),y.ri.vsub(c.position,y.ri),y.rj.copy(l),y.rj.vsub(o.position,y.rj),this.result.push(y),this.createFrictionEquationsFromContact(y,this.frictionResult)}}}}const dt=new h,wt=new h,gt=new h,Si=new h,zi=new h,Ai=new H,Ii=new H,Mi=new h,Fi=new h,Pi=new h,Ri=new h,Ti=new h;new h;const Ni=new h,_i=new h,Li=new h,Wi=new h,Vi=new h,qi=new h,ki=new h,Oi=new h,ji=new h,Hi=new h,Gi=new h,Di=new G,Yi=[],Lt=new h,Te=new h,Xi=new h,Ui=new h,$i=new h;function Zi(w,t,e){let s=null;const n=w.length;for(let i=0;i!==n;i++){const r=w[i],c=Xi;w[(i+1)%n].vsub(r,c);const o=Ui;c.cross(t,o);const a=$i;e.vsub(r,a);const u=o.dot(a);if(s===null||u>0&&s===!0||u<=0&&s===!1){s===null&&(s=u>0);continue}else return!1}return!0}const Wt=new h,Ki=new h,Qi=new h,Ji=new h,to=[new h,new h,new h,new h,new h,new h],eo=new h,so=new h,no=new h,io=new h,oo=new h,ro=new h,ao=new h,co=new h,lo=new h,ho=new h,uo=new h,po=new h,fo=new h,mo=new h;new h;new h;const yo=new h,vo=new h,wo=new h,go=new h,xo=new h,bo=new h,Eo=new h,Co=new h,Bo=new h,So=new h,Ne=new H,zo=new h;new h;const Ao=new h,_e=new h,Io=new h,Mo=new h,Fo=new h,Po=[0],Ro=new h,To=new h;class Le{constructor(){this.current=[],this.previous=[]}getKey(t,e){if(e<t){const s=e;e=t,t=s}return t<<16|e}set(t,e){const s=this.getKey(t,e),n=this.current;let i=0;for(;s>n[i];)i++;if(s!==n[i]){for(let r=n.length-1;r>=i;r--)n[r+1]=n[r];n[i]=s}}tick(){const t=this.current;this.current=this.previous,this.previous=t,this.current.length=0}getDiff(t,e){const s=this.current,n=this.previous,i=s.length,r=n.length;let c=0;for(let o=0;o<i;o++){let a=!1;const u=s[o];for(;u>n[c];)c++;a=u===n[c],a||We(t,u)}c=0;for(let o=0;o<r;o++){let a=!1;const u=n[o];for(;u>s[c];)c++;a=s[c]===u,a||We(e,u)}}}function We(w,t){w.push((t&4294901760)>>16,t&65535)}const te=(w,t)=>w<t?`${w}-${t}`:`${t}-${w}`;class No{constructor(){this.data={keys:[]}}get(t,e){const s=te(t,e);return this.data[s]}set(t,e,s){const n=te(t,e);this.get(t,e)||this.data.keys.push(n),this.data[n]=s}delete(t,e){const s=te(t,e),n=this.data.keys.indexOf(s);n!==-1&&this.data.keys.splice(n,1),delete this.data[s]}reset(){const t=this.data,e=t.keys;for(;e.length>0;){const s=e.pop();delete t[s]}}}class _o extends ts{constructor(t){t===void 0&&(t={}),super(),this.dt=-1,this.allowSleep=!!t.allowSleep,this.contacts=[],this.frictionEquations=[],this.quatNormalizeSkip=t.quatNormalizeSkip!==void 0?t.quatNormalizeSkip:0,this.quatNormalizeFast=t.quatNormalizeFast!==void 0?t.quatNormalizeFast:!1,this.time=0,this.stepnumber=0,this.default_dt=1/60,this.nextId=0,this.gravity=new h,t.gravity&&this.gravity.copy(t.gravity),t.frictionGravity&&(this.frictionGravity=new h,this.frictionGravity.copy(t.frictionGravity)),this.broadphase=t.broadphase!==void 0?t.broadphase:new ln,this.bodies=[],this.hasActiveBodies=!1,this.solver=t.solver!==void 0?t.solver:new wi,this.constraints=[],this.narrowphase=new Bi(this),this.collisionMatrix=new fe,this.collisionMatrixPrevious=new fe,this.bodyOverlapKeeper=new Le,this.shapeOverlapKeeper=new Le,this.contactmaterials=[],this.contactMaterialTable=new No,this.defaultMaterial=new yt("default"),this.defaultContactMaterial=new Gt(this.defaultMaterial,this.defaultMaterial,{friction:.3,restitution:0}),this.doProfiling=!1,this.profile={solve:0,makeContactConstraints:0,broadphase:0,integrate:0,narrowphase:0},this.accumulator=0,this.subsystems=[],this.addBodyEvent={type:"addBody",body:null},this.removeBodyEvent={type:"removeBody",body:null},this.idToBodyMap={},this.broadphase.setWorld(this)}getContactMaterial(t,e){return this.contactMaterialTable.get(t.id,e.id)}collisionMatrixTick(){const t=this.collisionMatrixPrevious;this.collisionMatrixPrevious=this.collisionMatrix,this.collisionMatrix=t,this.collisionMatrix.reset(),this.bodyOverlapKeeper.tick(),this.shapeOverlapKeeper.tick()}addConstraint(t){this.constraints.push(t)}removeConstraint(t){const e=this.constraints.indexOf(t);e!==-1&&this.constraints.splice(e,1)}rayTest(t,e,s){s instanceof At?this.raycastClosest(t,e,{skipBackfaces:!0},s):this.raycastAll(t,e,{skipBackfaces:!0},s)}raycastAll(t,e,s,n){return s===void 0&&(s={}),s.mode=Y.ALL,s.from=t,s.to=e,s.callback=n,ee.intersectWorld(this,s)}raycastAny(t,e,s,n){return s===void 0&&(s={}),s.mode=Y.ANY,s.from=t,s.to=e,s.result=n,ee.intersectWorld(this,s)}raycastClosest(t,e,s,n){return s===void 0&&(s={}),s.mode=Y.CLOSEST,s.from=t,s.to=e,s.result=n,ee.intersectWorld(this,s)}addBody(t){this.bodies.includes(t)||(t.index=this.bodies.length,this.bodies.push(t),t.world=this,t.initPosition.copy(t.position),t.initVelocity.copy(t.velocity),t.timeLastSleepy=this.time,t instanceof _&&(t.initAngularVelocity.copy(t.angularVelocity),t.initQuaternion.copy(t.quaternion)),this.collisionMatrix.setNumObjects(this.bodies.length),this.addBodyEvent.body=t,this.idToBodyMap[t.id]=t,this.dispatchEvent(this.addBodyEvent))}removeBody(t){t.world=null;const e=this.bodies.length-1,s=this.bodies,n=s.indexOf(t);if(n!==-1){s.splice(n,1);for(let i=0;i!==s.length;i++)s[i].index=i;this.collisionMatrix.setNumObjects(e),this.removeBodyEvent.body=t,delete this.idToBodyMap[t.id],this.dispatchEvent(this.removeBodyEvent)}}getBodyById(t){return this.idToBodyMap[t]}getShapeById(t){const e=this.bodies;for(let s=0;s<e.length;s++){const n=e[s].shapes;for(let i=0;i<n.length;i++){const r=n[i];if(r.id===t)return r}}return null}addContactMaterial(t){this.contactmaterials.push(t),this.contactMaterialTable.set(t.materials[0].id,t.materials[1].id,t)}removeContactMaterial(t){const e=this.contactmaterials.indexOf(t);e!==-1&&(this.contactmaterials.splice(e,1),this.contactMaterialTable.delete(t.materials[0].id,t.materials[1].id))}fixedStep(t,e){t===void 0&&(t=1/60),e===void 0&&(e=10);const s=X.now()/1e3;if(!this.lastCallTime)this.step(t,void 0,e);else{const n=s-this.lastCallTime;this.step(t,n,e)}this.lastCallTime=s}step(t,e,s){if(s===void 0&&(s=10),e===void 0)this.internalStep(t),this.time+=t;else{this.accumulator+=e;const n=X.now();let i=0;for(;this.accumulator>=t&&i<s&&(this.internalStep(t),this.accumulator-=t,i++,!(X.now()-n>t*1e3)););this.accumulator=this.accumulator%t;const r=this.accumulator/t;for(let c=0;c!==this.bodies.length;c++){const o=this.bodies[c];o.previousPosition.lerp(o.position,r,o.interpolatedPosition),o.previousQuaternion.slerp(o.quaternion,r,o.interpolatedQuaternion),o.previousQuaternion.normalize()}this.time+=e}}internalStep(t){this.dt=t;const e=this.contacts,s=ko,n=Oo,i=this.bodies.length,r=this.bodies,c=this.solver,o=this.gravity,a=this.doProfiling,u=this.profile,d=_.DYNAMIC;let l=-1/0;const f=this.constraints,p=qo;o.length();const m=o.x,v=o.y,g=o.z;let y=0;for(a&&(l=X.now()),y=0;y!==i;y++){const b=r[y];if(b.type===d){const M=b.force,A=b.mass;M.x+=A*m,M.y+=A*v,M.z+=A*g}}for(let b=0,M=this.subsystems.length;b!==M;b++)this.subsystems[b].update();a&&(l=X.now()),s.length=0,n.length=0,this.broadphase.collisionPairs(this,s,n),a&&(u.broadphase=X.now()-l);let E=f.length;for(y=0;y!==E;y++){const b=f[y];if(!b.collideConnected)for(let M=s.length-1;M>=0;M-=1)(b.bodyA===s[M]&&b.bodyB===n[M]||b.bodyB===s[M]&&b.bodyA===n[M])&&(s.splice(M,1),n.splice(M,1))}this.collisionMatrixTick(),a&&(l=X.now());const S=Vo,x=e.length;for(y=0;y!==x;y++)S.push(e[y]);e.length=0;const I=this.frictionEquations.length;for(y=0;y!==I;y++)p.push(this.frictionEquations[y]);for(this.frictionEquations.length=0,this.narrowphase.getContacts(s,n,this,e,S,this.frictionEquations,p),a&&(u.narrowphase=X.now()-l),a&&(l=X.now()),y=0;y<this.frictionEquations.length;y++)c.addEquation(this.frictionEquations[y]);const P=e.length;for(let b=0;b!==P;b++){const M=e[b],A=M.bi,B=M.bj,W=M.si,q=M.sj;let k;if(A.material&&B.material?k=this.getContactMaterial(A.material,B.material)||this.defaultContactMaterial:k=this.defaultContactMaterial,k.friction,A.material&&B.material&&(A.material.friction>=0&&B.material.friction>=0&&A.material.friction*B.material.friction,A.material.restitution>=0&&B.material.restitution>=0&&(M.restitution=A.material.restitution*B.material.restitution)),c.addEquation(M),A.allowSleep&&A.type===_.DYNAMIC&&A.sleepState===_.SLEEPING&&B.sleepState===_.AWAKE&&B.type!==_.STATIC){const $=B.velocity.lengthSquared()+B.angularVelocity.lengthSquared(),U=B.sleepSpeedLimit**2;$>=U*2&&(A.wakeUpAfterNarrowphase=!0)}if(B.allowSleep&&B.type===_.DYNAMIC&&B.sleepState===_.SLEEPING&&A.sleepState===_.AWAKE&&A.type!==_.STATIC){const $=A.velocity.lengthSquared()+A.angularVelocity.lengthSquared(),U=A.sleepSpeedLimit**2;$>=U*2&&(B.wakeUpAfterNarrowphase=!0)}this.collisionMatrix.set(A,B,!0),this.collisionMatrixPrevious.get(A,B)||(Et.body=B,Et.contact=M,A.dispatchEvent(Et),Et.body=A,B.dispatchEvent(Et)),this.bodyOverlapKeeper.set(A.id,B.id),this.shapeOverlapKeeper.set(W.id,q.id)}for(this.emitContactEvents(),a&&(u.makeContactConstraints=X.now()-l,l=X.now()),y=0;y!==i;y++){const b=r[y];b.wakeUpAfterNarrowphase&&(b.wakeUp(),b.wakeUpAfterNarrowphase=!1)}for(E=f.length,y=0;y!==E;y++){const b=f[y];b.update();for(let M=0,A=b.equations.length;M!==A;M++){const B=b.equations[M];c.addEquation(B)}}c.solve(t,this),a&&(u.solve=X.now()-l),c.removeAllEquations();const C=Math.pow;for(y=0;y!==i;y++){const b=r[y];if(b.type&d){const M=C(1-b.linearDamping,t),A=b.velocity;A.scale(M,A);const B=b.angularVelocity;if(B){const W=C(1-b.angularDamping,t);B.scale(W,B)}}}this.dispatchEvent(Wo),a&&(l=X.now());const F=this.stepnumber%(this.quatNormalizeSkip+1)===0,R=this.quatNormalizeFast;for(y=0;y!==i;y++)r[y].integrate(t,F,R);this.clearForces(),this.broadphase.dirty=!0,a&&(u.integrate=X.now()-l),this.stepnumber+=1,this.dispatchEvent(Lo);let N=!0;if(this.allowSleep)for(N=!1,y=0;y!==i;y++){const b=r[y];b.sleepTick(this.time),b.sleepState!==_.SLEEPING&&(N=!0)}this.hasActiveBodies=N}emitContactEvents(){const t=this.hasAnyEventListener("beginContact"),e=this.hasAnyEventListener("endContact");if((t||e)&&this.bodyOverlapKeeper.getDiff(ot,rt),t){for(let i=0,r=ot.length;i<r;i+=2)Ct.bodyA=this.getBodyById(ot[i]),Ct.bodyB=this.getBodyById(ot[i+1]),this.dispatchEvent(Ct);Ct.bodyA=Ct.bodyB=null}if(e){for(let i=0,r=rt.length;i<r;i+=2)Bt.bodyA=this.getBodyById(rt[i]),Bt.bodyB=this.getBodyById(rt[i+1]),this.dispatchEvent(Bt);Bt.bodyA=Bt.bodyB=null}ot.length=rt.length=0;const s=this.hasAnyEventListener("beginShapeContact"),n=this.hasAnyEventListener("endShapeContact");if((s||n)&&this.shapeOverlapKeeper.getDiff(ot,rt),s){for(let i=0,r=ot.length;i<r;i+=2){const c=this.getShapeById(ot[i]),o=this.getShapeById(ot[i+1]);at.shapeA=c,at.shapeB=o,c&&(at.bodyA=c.body),o&&(at.bodyB=o.body),this.dispatchEvent(at)}at.bodyA=at.bodyB=at.shapeA=at.shapeB=null}if(n){for(let i=0,r=rt.length;i<r;i+=2){const c=this.getShapeById(rt[i]),o=this.getShapeById(rt[i+1]);ct.shapeA=c,ct.shapeB=o,c&&(ct.bodyA=c.body),o&&(ct.bodyB=o.body),this.dispatchEvent(ct)}ct.bodyA=ct.bodyB=ct.shapeA=ct.shapeB=null}}clearForces(){const t=this.bodies,e=t.length;for(let s=0;s!==e;s++){const n=t[s];n.force,n.torque,n.force.set(0,0,0),n.torque.set(0,0,0)}}}new G;const ee=new Y,X=globalThis.performance||{};if(!X.now){let w=Date.now();X.timing&&X.timing.navigationStart&&(w=X.timing.navigationStart),X.now=()=>Date.now()-w}new h;const Lo={type:"postStep"},Wo={type:"preStep"},Et={type:_.COLLIDE_EVENT_NAME,body:null,contact:null},Vo=[],qo=[],ko=[],Oo=[],ot=[],rt=[],Ct={type:"beginContact",bodyA:null,bodyB:null},Bt={type:"endContact",bodyA:null,bodyB:null},at={type:"beginShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null},ct={type:"endShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null};var jo=function(){var w=0,t=1,e=new K;function s(){this.tolerance=-1,this.faces=[],this.newFaces=[],this.assigned=new c,this.unassigned=new c,this.vertices=[]}Object.assign(s.prototype,{toJSON:function(){const o=this.faces.map(f=>f.toArray()),a=Array.from(new Set(o.flat())).sort(),u=[];for(let f=0;f<a.length;f++)u.push(this.vertices[a[f]].point.x,this.vertices[a[f]].point.y,this.vertices[a[f]].point.z);const d=new Map;for(let f=0;f<a.length;f++)d.set(a[f],f);const l=[];for(let f=0;f<o.length;f++)l.push([d.get(o[f][0]),d.get(o[f][1]),d.get(o[f][2])]);return[u,l]},setFromPoints:function(o){Array.isArray(o)!==!0&&console.error("THREE.ConvexHull: Points parameter is not an array."),o.length<4&&console.error("THREE.ConvexHull: The algorithm needs at least four points."),this.makeEmpty();for(var a=0,u=o.length;a<u;a++)this.vertices.push(new r(o[a],a));return this.compute(),this},setFromObject:function(o){var a=[];return o.updateMatrixWorld(!0),o.traverse(function(u){var d,l,f,p=u.geometry;if(p!==void 0&&(p.isGeometry&&(p=p.toBufferGeometry?p.toBufferGeometry():new BufferGeometry().fromGeometry(p)),p.isBufferGeometry)){var m=p.attributes.position;if(m!==void 0)for(d=0,l=m.count;d<l;d++)f=new K,f.fromBufferAttribute(m,d).applyMatrix4(u.matrixWorld),a.push(f)}}),this.setFromPoints(a)},containsPoint:function(o){for(var a=this.faces,u=0,d=a.length;u<d;u++){var l=a[u];if(l.distanceToPoint(o)>this.tolerance)return!1}return!0},intersectRay:function(o,a){for(var u=this.faces,d=-1/0,l=1/0,f=0,p=u.length;f<p;f++){var m=u[f],v=m.distanceToPoint(o.origin),g=m.normal.dot(o.direction);if(v>0&&g>=0)return null;var y=g!==0?-v/g:0;if(!(y<=0)&&(g>0?l=Math.min(y,l):d=Math.max(y,d),d>l))return null}return d!==-1/0?o.at(d,a):o.at(l,a),a},intersectsRay:function(o){return this.intersectRay(o,e)!==null},makeEmpty:function(){return this.faces=[],this.vertices=[],this},addVertexToFace:function(o,a){return o.face=a,a.outside===null?this.assigned.append(o):this.assigned.insertBefore(a.outside,o),a.outside=o,this},removeVertexFromFace:function(o,a){return o===a.outside&&(o.next!==null&&o.next.face===a?a.outside=o.next:a.outside=null),this.assigned.remove(o),this},removeAllVerticesFromFace:function(o){if(o.outside!==null){for(var a=o.outside,u=o.outside;u.next!==null&&u.next.face===o;)u=u.next;return this.assigned.removeSubList(a,u),a.prev=u.next=null,o.outside=null,a}},deleteFaceVertices:function(o,a){var u=this.removeAllVerticesFromFace(o);if(u!==void 0)if(a===void 0)this.unassigned.appendChain(u);else{var d=u;do{var l=d.next,f=a.distanceToPoint(d.point);f>this.tolerance?this.addVertexToFace(d,a):this.unassigned.append(d),d=l}while(d!==null)}return this},resolveUnassignedPoints:function(o){if(this.unassigned.isEmpty()===!1){var a=this.unassigned.first();do{for(var u=a.next,d=this.tolerance,l=null,f=0;f<o.length;f++){var p=o[f];if(p.mark===w){var m=p.distanceToPoint(a.point);if(m>d&&(d=m,l=p),d>1e3*this.tolerance)break}}l!==null&&this.addVertexToFace(a,l),a=u}while(a!==null)}return this},computeExtremes:function(){var o=new K,a=new K,u=[],d=[],l,f,p;for(l=0;l<3;l++)u[l]=d[l]=this.vertices[0];for(o.copy(this.vertices[0].point),a.copy(this.vertices[0].point),l=0,f=this.vertices.length;l<f;l++){var m=this.vertices[l],v=m.point;for(p=0;p<3;p++)v.getComponent(p)<o.getComponent(p)&&(o.setComponent(p,v.getComponent(p)),u[p]=m);for(p=0;p<3;p++)v.getComponent(p)>a.getComponent(p)&&(a.setComponent(p,v.getComponent(p)),d[p]=m)}return this.tolerance=3*Number.EPSILON*(Math.max(Math.abs(o.x),Math.abs(a.x))+Math.max(Math.abs(o.y),Math.abs(a.y))+Math.max(Math.abs(o.z),Math.abs(a.z))),{min:u,max:d}},computeInitialHull:function(){var o,a,u;return function(){o===void 0&&(o=new Cs,a=new Bs,u=new K);var l,f=this.vertices,p=this.computeExtremes(),m=p.min,v=p.max,g,y,E,S,x,I,P,C,z=0,F=0;for(x=0;x<3;x++)C=v[x].point.getComponent(x)-m[x].point.getComponent(x),C>z&&(z=C,F=x);for(g=m[F],y=v[F],z=0,o.set(g.point,y.point),x=0,I=this.vertices.length;x<I;x++)l=f[x],l!==g&&l!==y&&(o.closestPointToPoint(l.point,!0,u),C=u.distanceToSquared(l.point),C>z&&(z=C,E=l));for(z=-1,a.setFromCoplanarPoints(g.point,y.point,E.point),x=0,I=this.vertices.length;x<I;x++)l=f[x],l!==g&&l!==y&&l!==E&&(C=Math.abs(a.distanceToPoint(l.point)),C>z&&(z=C,S=l));var R=[];if(a.distanceToPoint(S.point)<0)for(R.push(n.create(g,y,E),n.create(S,y,g),n.create(S,E,y),n.create(S,g,E)),x=0;x<3;x++)P=(x+1)%3,R[x+1].getEdge(2).setTwin(R[0].getEdge(P)),R[x+1].getEdge(1).setTwin(R[P+1].getEdge(0));else for(R.push(n.create(g,E,y),n.create(S,g,y),n.create(S,y,E),n.create(S,E,g)),x=0;x<3;x++)P=(x+1)%3,R[x+1].getEdge(2).setTwin(R[0].getEdge((3-x)%3)),R[x+1].getEdge(0).setTwin(R[P+1].getEdge(1));for(x=0;x<4;x++)this.faces.push(R[x]);for(x=0,I=f.length;x<I;x++)if(l=f[x],l!==g&&l!==y&&l!==E&&l!==S){z=this.tolerance;var N=null;for(P=0;P<4;P++)C=this.faces[P].distanceToPoint(l.point),C>z&&(z=C,N=this.faces[P]);N!==null&&this.addVertexToFace(l,N)}return this}}(),reindexFaces:function(){for(var o=[],a=0;a<this.faces.length;a++){var u=this.faces[a];u.mark===w&&o.push(u)}return this.faces=o,this},nextVertexToAdd:function(){if(this.assigned.isEmpty()===!1){var o,a=0,u=this.assigned.first().face,d=u.outside;do{var l=u.distanceToPoint(d.point);l>a&&(a=l,o=d),d=d.next}while(d!==null&&d.face===u);return o}},computeHorizon:function(o,a,u,d){this.deleteFaceVertices(u),u.mark=t;var l;a===null?l=a=u.getEdge(0):l=a.next;do{var f=l.twin,p=f.face;p.mark===w&&(p.distanceToPoint(o)>this.tolerance?this.computeHorizon(o,f,p,d):d.push(l)),l=l.next}while(l!==a);return this},addAdjoiningFace:function(o,a){var u=n.create(o,a.tail(),a.head());return this.faces.push(u),u.getEdge(-1).setTwin(a.twin),u.getEdge(0)},addNewFaces:function(o,a){this.newFaces=[];for(var u=null,d=null,l=0;l<a.length;l++){var f=a[l],p=this.addAdjoiningFace(o,f);u===null?u=p:p.next.setTwin(d),this.newFaces.push(p.face),d=p}return u.next.setTwin(d),this},addVertexToHull:function(o){var a=[];return this.unassigned.clear(),this.removeVertexFromFace(o,o.face),this.computeHorizon(o.point,null,o.face,a),this.addNewFaces(o,a),this.resolveUnassignedPoints(this.newFaces),this},cleanup:function(){return this.assigned.clear(),this.unassigned.clear(),this.newFaces=[],this},compute:function(){var o;for(this.computeInitialHull();(o=this.nextVertexToAdd())!==void 0;)this.addVertexToHull(o);return this.reindexFaces(),this.cleanup(),this}});function n(){this.normal=new K,this.midpoint=new K,this.area=0,this.constant=0,this.outside=null,this.mark=w,this.edge=null}Object.assign(n,{create:function(o,a,u){var d=new n,l=new i(o,d),f=new i(a,d),p=new i(u,d);return l.next=p.prev=f,f.next=l.prev=p,p.next=f.prev=l,d.edge=l,d.compute()}}),Object.assign(n.prototype,{toArray:function(){const o=[];let a=this.edge;do o.push(a.head().index),a=a.next;while(a!==this.edge);return o},getEdge:function(o){for(var a=this.edge;o>0;)a=a.next,o--;for(;o<0;)a=a.prev,o++;return a},compute:function(){var o;return function(){o===void 0&&(o=new Ss);var u=this.edge.tail(),d=this.edge.head(),l=this.edge.next.head();return o.set(u.point,d.point,l.point),o.getNormal(this.normal),o.getMidpoint(this.midpoint),this.area=o.getArea(),this.constant=this.normal.dot(this.midpoint),this}}(),distanceToPoint:function(o){return this.normal.dot(o)-this.constant}});function i(o,a){this.vertex=o,this.prev=null,this.next=null,this.twin=null,this.face=a}Object.assign(i.prototype,{head:function(){return this.vertex},tail:function(){return this.prev?this.prev.vertex:null},length:function(){var o=this.head(),a=this.tail();return a!==null?a.point.distanceTo(o.point):-1},lengthSquared:function(){var o=this.head(),a=this.tail();return a!==null?a.point.distanceToSquared(o.point):-1},setTwin:function(o){return this.twin=o,o.twin=this,this}});function r(o,a){this.point=o,this.index=a,this.prev=null,this.next=null,this.face=null}function c(){this.head=null,this.tail=null}return Object.assign(c.prototype,{first:function(){return this.head},last:function(){return this.tail},clear:function(){return this.head=this.tail=null,this},insertBefore:function(o,a){return a.prev=o.prev,a.next=o,a.prev===null?this.head=a:a.prev.next=a,o.prev=a,this},insertAfter:function(o,a){return a.prev=o,a.next=o.next,a.next===null?this.tail=a:a.next.prev=a,o.next=a,this},append:function(o){return this.head===null?this.head=o:this.tail.next=o,o.prev=this.tail,o.next=null,this.tail=o,this},appendChain:function(o){for(this.head===null?this.head=o:this.tail.next=o,o.prev=this.tail;o.next!==null;)o=o.next;return this.tail=o,this},remove:function(o){return o.prev===null?this.head=o.next:o.prev.next=o.next,o.next===null?this.tail=o.prev:o.next.prev=o.prev,this},removeSubList:function(o,a){return o.prev===null?this.head=a.next:o.prev.next=a.next,a.next===null?this.tail=o.prev:a.next.prev=o.prev,this},isEmpty:function(){return this.head===null}}),s}();const Ho=new K,Vt=new K,Go=new Qe;function jt(w){const t=Yo(w);if(t.length===0)return null;if(t.length===1)return Ve(t[0]);let e;const s=[];for(;e=t.pop();)s.push(Xo(Ve(e)));return Do(s)}function Ve(w){let t=w.geometry;return t.toBufferGeometry?t=t.toBufferGeometry():t=t.clone(),w.updateMatrixWorld(),w.matrixWorld.decompose(Ho,Go,Vt),t.scale(Vt.x,Vt.y,Vt.z),t}function Do(w){let t=0;for(let n=0;n<w.length;n++){const i=w[n].attributes.position;i&&i.itemSize===3&&(t+=i.count)}const e=new Float32Array(t*3);let s=0;for(let n=0;n<w.length;n++){const i=w[n].attributes.position;if(i&&i.itemSize===3)for(let r=0;r<i.count;r++)e[s++]=i.getX(r),e[s++]=i.getY(r),e[s++]=i.getZ(r)}return new zt().setAttribute("position",new Ke(e,3))}function hs(w){const t=w.attributes.position,e=new Float32Array(t.count*3);for(let s=0;s<t.count;s++)e[s*3]=t.getX(s),e[s*3+1]=t.getY(s),e[s*3+2]=t.getZ(s);return e}function Yo(w){const t=[];return w.traverse(function(e){e.isMesh&&t.push(e)}),t}function qt(w,t){switch(t){case"x":return w.x;case"y":return w.y;case"z":return w.z}throw new Error(`Unexpected component ${t}`)}function Xo(w,t=1e-4){t=Math.max(t,Number.EPSILON);const e={},s=w.getIndex(),n=w.getAttribute("position"),i=s?s.count:n.count;let r=0;const c=[],o=[],a=Math.log10(1/t),u=Math.pow(10,a);for(let f=0;f<i;f++){const p=s?s.getX(f):f;let m="";m+=`${~~(n.getX(p)*u)},`,m+=`${~~(n.getY(p)*u)},`,m+=`${~~(n.getZ(p)*u)},`,m in e?c.push(e[m]):(o.push(n.getX(p)),o.push(n.getY(p)),o.push(n.getZ(p)),e[m]=r,c.push(r),r++)}const d=new Ke(new Float32Array(o),n.itemSize,n.normalized),l=new zt;return l.setAttribute("position",d),l.setIndex(c),l}const qe=Math.PI/2;var D;(function(w){w.BOX="Box",w.CYLINDER="Cylinder",w.SPHERE="Sphere",w.HULL="ConvexPolyhedron",w.MESH="Trimesh"})(D||(D={}));const Uo=function(t,e={}){let s;if(e.type===D.BOX)return Oe(t);if(e.type===D.CYLINDER)return nr(t,e);if(e.type===D.SPHERE)return rr(t,e);if(e.type===D.HULL)return er(t);if(e.type===D.MESH)return s=jt(t),s?ar(s):null;if(e.type)throw new Error(`[CANNON.getShapeParameters] Invalid type "${e.type}".`);if(s=jt(t),!s)return null;switch(s.type){case"BoxGeometry":case"BoxBufferGeometry":return ke(s);case"CylinderGeometry":case"CylinderBufferGeometry":return sr(s);case"PlaneGeometry":case"PlaneBufferGeometry":return ir(s);case"SphereGeometry":case"SphereBufferGeometry":return or(s);case"TubeGeometry":case"BufferGeometry":return Oe(t);default:return console.warn('Unrecognized geometry: "%s". Using bounding box as shape.',s.type),ke(s)}},$o=function(t,e={}){const s=Uo(t,e);if(!s)return null;const{type:n,params:i,offset:r,orientation:c}=s;let o;return n===D.BOX?o=Zo(i):n===D.CYLINDER?o=Ko(i):n===D.SPHERE?o=Qo(i):n===D.HULL?o=Jo(i):o=tr(i),{shape:o,offset:r,orientation:c}};function Zo(w){const{x:t,y:e,z:s}=w;return new mt(new h(t,e,s))}function Ko(w){const{radiusTop:t,radiusBottom:e,height:s,segments:n}=w,i=new li(t,e,s,n);return i.radiusTop=e,i.radiusBottom=e,i.height=s,i.numSegments=n,i}function Qo(w){return new ci(w.radius)}function Jo(w){const{faces:t,vertices:e}=w,s=[];for(let i=0;i<e.length;i+=3)s.push(new h(e[i],e[i+1],e[i+2]));return new ft({faces:t,vertices:s})}function tr(w){const{vertices:t,indices:e}=w;return new Ot(t,e)}function ke(w){if(!hs(w).length)return null;w.computeBoundingBox();const e=w.boundingBox;return{type:D.BOX,params:{x:(e.max.x-e.min.x)/2,y:(e.max.y-e.min.y)/2,z:(e.max.z-e.min.z)/2}}}function Oe(w){const t=w.clone();t.quaternion.set(0,0,0,1),t.updateMatrixWorld();const e=new Ze().setFromObject(t);if(!isFinite(e.min.lengthSq()))return null;const s=e.translate(t.position.negate()).getCenter(new K);return{type:D.BOX,params:{x:(e.max.x-e.min.x)/2,y:(e.max.y-e.min.y)/2,z:(e.max.z-e.min.z)/2},offset:s.lengthSq()?new h(s.x,s.y,s.z):void 0}}function er(w){const t=jt(w);if(!t)return null;const e=1e-4;for(let i=0;i<t.attributes.position.count;i++)t.attributes.position.setXYZ(i,t.attributes.position.getX(i)+(Math.random()-.5)*e,t.attributes.position.getY(i)+(Math.random()-.5)*e,t.attributes.position.getZ(i)+(Math.random()-.5)*e);const[s,n]=new jo().setFromObject(new J(t)).toJSON();return{type:D.HULL,params:{vertices:new Float32Array(s),faces:n}}}function sr(w){const t=w.parameters;return{type:D.CYLINDER,params:{radiusTop:t.radiusTop,radiusBottom:t.radiusBottom,height:t.height,segments:t.radialSegments},orientation:new H().setFromEuler(zs.degToRad(-90),0,0,"XYZ").normalize()}}function nr(w,t){const e=["x","y","z"],s=t.cylinderAxis||"y",n=e.splice(e.indexOf(s),1)&&e,i=new Ze().setFromObject(w);if(!isFinite(i.min.lengthSq()))return null;const r=i.max[s]-i.min[s],c=.5*Math.max(qt(i.max,n[0])-qt(i.min,n[0]),qt(i.max,n[1])-qt(i.min,n[1])),o=s==="y"?qe:0,a=s==="z"?qe:0;return{type:D.CYLINDER,params:{radiusTop:c,radiusBottom:c,height:r,segments:12},orientation:new H().setFromEuler(o,a,0,"XYZ").normalize()}}function ir(w){w.computeBoundingBox();const t=w.boundingBox;return{type:D.BOX,params:{x:(t.max.x-t.min.x)/2||.1,y:(t.max.y-t.min.y)/2||.1,z:(t.max.z-t.min.z)/2||.1}}}function or(w){return{type:D.SPHERE,params:{radius:w.parameters.radius}}}function rr(w,t){if(t.sphereRadius)return{type:D.SPHERE,params:{radius:t.sphereRadius}};const e=jt(w);return e?(e.computeBoundingSphere(),{type:D.SPHERE,params:{radius:e.boundingSphere.radius}}):null}function ar(w){const t=hs(w);if(!t.length)return null;const e=new Uint32Array(t.length);for(let s=0;s<t.length;s++)e[s]=s;return{type:D.MESH,params:{vertices:t,indices:e}}}class cr{constructor(t,e){V(this,"mesh");V(this,"options");V(this,"body");V(this,"debugModel");this.mesh=t.clone();let s={mass:0,position:t.position,rotation:t.quaternion,friction:.3};e=Object.assign({},e,s),this.options=e;let n=new yt("triMat");n.friction=e.friction;let{shape:i}=$o(this.mesh,{type:D.MESH}),r=new _({mass:e.mass,position:e.position,quaternion:e.rotation,shape:i});r.material=n,this.body=r}}function lr(w,t,e){let{color:s=65280,scale:n=1,onInit:i,onUpdate:r}=e===void 0?{}:e;const c=[],o=new Je({color:s??65280,wireframe:!0}),a=new h,u=new h,d=new h,l=new H,f=new he(1),p=new se(1,1,1),m=new ne(10,10,10,10);m.translate(0,0,1e-4);function v(C){const z=new zt,F=[];for(let N=0;N<C.vertices.length;N++){const b=C.vertices[N];F.push(b.x,b.y,b.z)}z.setAttribute("position",new Ut(F,3));const R=[];for(let N=0;N<C.faces.length;N++){const b=C.faces[N],M=b[0];for(let A=1;A<b.length-1;A++){const B=b[A],W=b[A+1];R.push(M,B,W)}}return z.setIndex(R),z.computeBoundingSphere(),z.computeVertexNormals(),z}function g(C){const z=new zt,F=[],R=a,N=u,b=d;for(let M=0;M<C.indices.length/3;M++)C.getTriangleVertices(M,R,N,b),F.push(R.x,R.y,R.z),F.push(N.x,N.y,N.z),F.push(b.x,b.y,b.z);return z.setAttribute("position",new Ut(F,3)),z.computeBoundingSphere(),z.computeVertexNormals(),z}function y(C){const z=new zt,F=C.elementSize||1,R=C.data.flatMap((b,M)=>b.flatMap((A,B)=>[M*F,B*F,A])),N=[];for(let b=0;b<C.data.length-1;b++)for(let M=0;M<C.data[b].length-1;M++){const A=C.data[b].length,B=b*A+M;N.push(B+1,B+A,B+A+1),N.push(B+A,B+1,B)}return z.setIndex(N),z.setAttribute("position",new Ut(R,3)),z.computeBoundingSphere(),z.computeVertexNormals(),z}function E(C){let z=new J;const{SPHERE:F,BOX:R,PLANE:N,CYLINDER:b,CONVEXPOLYHEDRON:M,TRIMESH:A,HEIGHTFIELD:B}=T.types;switch(C.type){case F:{z=new J(f,o);break}case R:{z=new J(p,o);break}case N:{z=new J(m,o);break}case b:{const W=new As(C.radiusTop,C.radiusBottom,C.height,C.numSegments);z=new J(W,o),C.geometryId=W.id;break}case M:{const W=v(C);z=new J(W,o),C.geometryId=W.id;break}case A:{const W=g(C);z=new J(W,o),C.geometryId=W.id;break}case B:{const W=y(C);z=new J(W,o),C.geometryId=W.id;break}}return w.add(z),z}function S(C,z){const{SPHERE:F,BOX:R,PLANE:N,CYLINDER:b,CONVEXPOLYHEDRON:M,TRIMESH:A,HEIGHTFIELD:B}=T.types;switch(z.type){case F:{const{radius:W}=z;C.scale.set(W*n,W*n,W*n);break}case R:{C.scale.copy(z.halfExtents),C.scale.multiplyScalar(2*n);break}case N:break;case b:{C.scale.set(1*n,1*n,1*n);break}case M:{C.scale.set(1*n,1*n,1*n);break}case A:{C.scale.copy(z.scale).multiplyScalar(n);break}case B:{C.scale.set(1*n,1*n,1*n);break}}}function x(C,z){if(!C)return!1;const{geometry:F}=C;return F instanceof he&&z.type===T.types.SPHERE||F instanceof se&&z.type===T.types.BOX||F instanceof ne&&z.type===T.types.PLANE||F.id===z.geometryId&&z.type===T.types.CYLINDER||F.id===z.geometryId&&z.type===T.types.CONVEXPOLYHEDRON||F.id===z.geometryId&&z.type===T.types.TRIMESH||F.id===z.geometryId&&z.type===T.types.HEIGHTFIELD}function I(C,z){let F=c[C],R=!1;return x(F,z)||(F&&w.remove(F),c[C]=F=E(z),R=!0),S(F,z),R}function P(){const C=c,z=a,F=l;let R=0;for(const N of t.bodies)for(let b=0;b!==N.shapes.length;b++){const M=N.shapes[b],A=I(R,M),B=C[R];B&&(N.quaternion.vmult(N.shapeOffsets[b],z),N.position.vadd(z,z),N.quaternion.mult(N.shapeOrientations[b],F),B.position.copy(z),B.quaternion.copy(F),A&&i instanceof Function&&i(N,B,M),!A&&r instanceof Function&&r(N,B,M)),R++}for(let N=R;N<C.length;N++){const b=C[N];b&&w.remove(b)}C.length=R}return{update:P}}class hr{constructor(t){V(this,"inputReceiver");V(this,"domElement");V(this,"gamepads",[]);V(this,"gamepadInputMap");V(this,"animationFrameHandler");V(this,"keyboardActionsMap",{});V(this,"gamepadActionsMap",{});V(this,"lastInput");V(this,"lastInputTime");this.domElement=t,document.addEventListener("keydown",e=>this.onKeyboardInput(e),!1),document.addEventListener("keyup",e=>this.onKeyboardInput(e,!1),!1),window.addEventListener("gamepadconnected",e=>{console.log("Gamepad connected at index %d: %s. %d buttons, %d axes.",e.gamepad.index,e.gamepad.id,e.gamepad.buttons.length,e.gamepad.axes.length);const s=navigator.getGamepads()[e.gamepad.index];this.gamepads.push(s),console.log("buttons",s.buttons,s.axes)}),this.inputLoop()}inputLoop(){this.animationFrameHandler=requestAnimationFrame(()=>this.inputLoop());const t=navigator.getGamepads();t&&(this.gamepadActionsMap={},t.forEach(e=>{e&&(e.buttons.forEach((s,n)=>{s.pressed&&this.updateGampepadInputMap(n,s.value)}),e.axes.forEach((s,n)=>{this.updateGamepadAxesInputMap(n,s)}))}),this.inputReceiver&&this.inputReceiver.updateActions(Object.assign({},this.keyboardActionsMap,this.gamepadActionsMap)))}onKeyboardInput(t,e=!0){let s,n=!1;switch(e&&(!t.repeat&&t.keyCode===this.lastInput&&this.lastInputTime>t.timeStamp-200&&(n=!0),this.lastInput=t.keyCode,this.lastInputTime=t.timeStamp),t.code){case"ArrowUp":case"KeyW":s=n?"forward":"up";break;case"ArrowLeft":s="left";break;case"ArrowRight":s="right";break;case"ArrowDown":s=n?"reverse":"down";break}s&&(this.keyboardActionsMap[s]=e,s==="forward"&&(this.keyboardActionsMap.reverse=!1),s==="reverse"&&(this.keyboardActionsMap.forward=!1))}updateGampepadInputMap(t,e){let s,n;switch(t){case 7:case 12:s="up",n=e;break;case 14:s="left",n=!0;break;case 15:s="right",n=!0;break}s&&(this.gamepadActionsMap[s]=n)}updateGamepadAxesInputMap(t,e){let s,n;t===0&&(e>.05&&(s="right",n=e),e<-.05&&(s="left",n=-e)),s&&(this.gamepadActionsMap[s]=n)}}function ie(w){return new K(w.x,w.y,w.z)}function Ht(w){return new Qe(w.x,w.y,w.z,w.w)}function ur(w){return new h(w.x,w.y,w.z)}class dr{constructor(t,e,s,n){V(this,"physicsBody");V(this,"rayCastVehicle");V(this,"wheels");V(this,"steeringValue",0);V(this,"forceValue",0);V(this,"brakeForceValue",0);V(this,"skidSteer",!1);V(this,"transmission");V(this,"speed");const{width:i,weight:r,wheelDiameter:c}=n;this.skidSteer=n.skidSteer,this.transmission=n.type||"fwd",console.log(this.transmission),this.wheels=s;let o=i?i/1e3:e.geometry.boundingBox.max.x-e.geometry.boundingBox.min.x,a=e.geometry.boundingBox.max.y-e.geometry.boundingBox.min.y,u=e.geometry.boundingBox.max.z-e.geometry.boundingBox.min.z,d=a/2+e.geometry.boundingBox.min.y;const l=new mt(new h(o/2,a/2,u/2)),f=r;this.physicsBody=new _({mass:f}),this.physicsBody.addShape(l,new h(0,d,0)),this.physicsBody.angularVelocity.set(0,10,0),this.physicsBody.angularDamping=.5,this.physicsBody.position.y=5,this.rayCastVehicle=new qn({chassisBody:this.physicsBody,indexUpAxis:1,indexRightAxis:0,indexForwardAxis:2});const p=.35;this.wheels.forEach(m=>{const v={radius:c/200,suspensionStiffness:20,suspensionRestLength:p,maxSuspensionTravel:1,frictionSlip:.8,dampingRelaxation:2,dampingCompression:2,rollInfluence:.8};let g=[0,p-.1,0];v.chassisConnectionPointLocal=new h,v.axleLocal=new h(-1,0,0),v.directionLocal=new h(0,-1,0),v.chassisConnectionPointLocal.set(m.position.x+g[0],m.position.y+g[1],m.position.z+g[2]);const y=this.rayCastVehicle.addWheel(v);m.rayCastWheelInfoIndex=y}),this.rayCastVehicle.addToWorld(t)}steerWheels(t){this.skidSteer||this.wheels.forEach(e=>{e.wheelType===$t.Front&&this.rayCastVehicle.setSteeringValue(t,e.rayCastWheelInfoIndex)})}forceToWheels(t){let e=this.wheels.reduce((n,i)=>(this.transmission==="fwd"&&i.wheelType===$t.Front&&n.push(i),this.transmission==="rwd"&&i.wheelType===$t.Rear&&n.push(i),this.transmission.match(/awd/i)&&n.push(i),n),[]);const s=e.length;e.forEach(n=>{let i=-t/s;this.skidSteer&&(i=n.isRight?i-this.steeringValue*5e3:i+this.steeringValue*5e3),this.rayCastVehicle.applyEngineForce(i,n.rayCastWheelInfoIndex)})}brakeWheels(t){this.wheels.forEach(e=>{this.rayCastVehicle.setBrake(t/this.wheels.length,e.rayCastWheelInfoIndex)})}animate(t){this.steerWheels(this.steeringValue),this.forceToWheels(this.forceValue),this.brakeWheels(this.brakeForceValue);const e=Ht(this.physicsBody.quaternion),s=new K(0,0,1).applyQuaternion(e);this.speed=this.physicsBody.velocity.dot(ur(s))}}class pr extends Rs{constructor(e,s,n){super(e);V(this,"carPhysic");V(this,"carModel");V(this,"steeringControl",new fr);V(this,"throttleInput",0);V(this,"brakeInput",0);V(this,"isReverse",!1);Ns(this,null,!1).then(i=>{s.add(i.object),this.carModel=i,this.carPhysic=new dr(n,i.carBody,i.wheels,e)})}animate(e){if(!this.carPhysic)return;this.steeringControl.update(e,this.carPhysic.speed),this.carPhysic.steeringValue=this.steeringControl.steeringValue,this.state.speed=this.carPhysic.speed,this.updateEngineRPM();let s=this.getEndForce();this.carPhysic.forceValue=this.isReverse?-s:s;var n=this.props.brakePadsForce*this.brakeInput;this.carPhysic.brakeForceValue=n,this.carModel.updateLights(this.brakeInput,this.isReverse),this.carPhysic.animate(e),this.carModel.carBody.position.copy(ie(this.carPhysic.physicsBody.position)),this.carModel.carBody.quaternion.copy(Ht(this.carPhysic.physicsBody.quaternion)),this.carModel.wheels.forEach((i,r)=>{let c=this.carPhysic.rayCastVehicle.wheelInfos[r].worldTransform;i.position.copy(ie(c.position)),i.quaternion.copy(Ht(c.quaternion))})}updateActions(e){e.left?this.steeringControl.steer("left",e.left):e.right?this.steeringControl.steer("right",e.right):this.steeringControl.steer("center"),!this.isReverse&&e.up||this.isReverse&&e.down?this.inputs.throttle=1:this.inputs.throttle=0,!this.isReverse&&e.down||this.isReverse&&e.up?this.brakeInput=1:this.brakeInput=0,e.reverse&&(this.isReverse=!0),e.forward&&(this.isReverse=!1)}}class fr{constructor(){V(this,"steeringValue",0);V(this,"steeringAmplitude",.8);V(this,"steeringDirection",0)}update(t,e){let s=this.steeringValue+.1*this.steeringDirection;if(this.steeringDirection===0&&e>.1){let n=Math.sign(this.steeringValue),i=Math.min(Math.max(e/7,.1),1);s-=n*.05*i}this.steeringValue=Math.min(Math.max(s,-this.steeringAmplitude),this.steeringAmplitude)}steer(t,e=null){if(typeof e=="number"&&e>0){this.steeringValue=t==="left"?e:-e,this.steeringDirection=null;return}switch(t){case"left":this.steeringDirection=1;break;case"right":this.steeringDirection=-1;break;case"center":this.steeringDirection=0;break}}}class mr{constructor(t,e){V(this,"object");V(this,"physicBody");V(this,"weight",3.2);Is("assets/cone75").then(s=>{this.object=s.scene.children[0],console.log("object",this.object);let n=this.object.geometry.boundingBox.max.x-this.object.geometry.boundingBox.min.x,i=this.object.geometry.boundingBox.max.y-this.object.geometry.boundingBox.min.y,r=this.object.geometry.boundingBox.max.z-this.object.geometry.boundingBox.min.z,c=this.object.geometry.boundingBox.max.y-i/2;const o=3.2,a=new mt(new h(n/2,i/2,r/2)),u=new yt("boxMat");u.friction=.3,this.physicBody=new _({mass:o,position:new h(3,3,0),material:u}),this.physicBody.addShape(a,new h(0,c,0)),e.addBody(this.physicBody),t.add(this.object)})}animate(t){this.physicBody&&(this.object.position.copy(ie(this.physicBody.position)),this.object.quaternion.copy(Ht(this.physicBody.quaternion)))}}class yr extends Ps{constructor(e,s,n,i,r,c){super(e,s,n,i);V(this,"physicsWorld");V(this,"physicsDebugger");this.physicsWorld=r,this.physicsDebugger=c}animate(e){this.physicsWorld.step(Math.min(e,50)/1e3),this.physicsDebugger.update()}}class vr extends Ms{constructor(){super();V(this,"physicsWorld");V(this,"physicsDebugger");V(this,"inputManager");V(this,"carEntityControlled");this.physicsWorld=new _o,this.physicsWorld.gravity.set(0,-9.81,0),this.physicsWorld.broadphase=new xt(this.physicsWorld),this.physicsWorld.solver.iterations=10,this.physicsWorld.allowSleep=!0;const e=new se,s=new Je({color:65280}),n=new J(e,s);n.position.y=2,n.castShadow=!0,this.scene.add(n),n.position.z=0,n.position.x=0;const i=Ts("citroen_2cv"),r=new pr(i,this.scene,this.physicsWorld);this.carEntityControlled=r;const c=new mr(this.scene,this.physicsWorld),o=new ne(10,10),a=new Fs({color:16777215}),u=new J(o,a);u.rotation.x=-Math.PI/2,u.receiveShadow=!0,this.scene.add(u);let d=new cr(u,{});this.physicsWorld.addBody(d.body);let l=new yt("boxMat");l.friction=.3;let f=new mt(new h(500,.01,10)),p=new _({mass:0,position:new h(0,0,0),shape:f});p.material=l,this.physicsWorld.addBody(p),this.physicsDebugger=lr(this.scene,this.physicsWorld,{}),this.animation=new yr(this.scene,this.camera,this.renderer,this.cameraControls,this.physicsWorld,this.physicsDebugger),this.animation.addAnimated(r),this.animation.addAnimated(c),this.inputManager=new hr(this.domElement),this.inputManager.inputReceiver=r,this.start()}}function je(w){let t,e;return t=new _s({props:{title:"Speed",key:"speed",transformFn:gr,time:w[2],observed:[w[0].carEntityControlled]}}),{c(){Ye(t.$$.fragment)},l(s){Xe(t.$$.fragment,s)},m(s,n){Ue(t,s,n),e=!0},p(s,n){const i={};n&4&&(i.time=s[2]),n&1&&(i.observed=[s[0].carEntityControlled]),t.$set(i)},i(s){e||(St(t.$$.fragment,s),e=!0)},o(s){kt(t.$$.fragment,s),e=!1},d(s){$e(t,s)}}}function wr(w){let t,e,s,n,i=w[0]&&je(w);return{c(){t=ps("div"),e=fs(),i&&i.c(),s=le()},l(r){t=ms(r,"DIV",{}),ys(t).forEach(Ft),e=vs(r),i&&i.l(r),s=le()},m(r,c){Xt(r,t,c),w[3](t),Xt(r,e,c),i&&i.m(r,c),Xt(r,s,c),n=!0},p(r,[c]){r[0]?i?(i.p(r,c),c&1&&St(i,1)):(i=je(r),i.c(),St(i,1),i.m(s.parentNode,s)):i&&(bs(),kt(i,1,1,()=>{i=null}),Es())},i(r){n||(St(i),n=!0)},o(r){kt(i),n=!1},d(r){r&&(Ft(t),Ft(e),Ft(s)),w[3](null),i&&i.d(r)}}}function gr(w){return w*3.6}function xr(w,t,e){let s,n,i=0;ws(()=>{e(0,s=new vr),n.appendChild(s.domElement),s.animation.addAnimated({animate:c=>{e(2,i+=c)}})});function r(c){gs[c?"unshift":"push"](()=>{n=c,e(1,n)})}return[s,n,i,r]}class br extends Ge{constructor(t){super(),De(this,t,xr,wr,He,{})}}function Er(w){let t,e;return t=new br({}),{c(){Ye(t.$$.fragment)},l(s){Xe(t.$$.fragment,s)},m(s,n){Ue(t,s,n),e=!0},p:xs,i(s){e||(St(t.$$.fragment,s),e=!0)},o(s){kt(t.$$.fragment,s),e=!1},d(s){$e(t,s)}}}class Pr extends Ge{constructor(t){super(),De(this,t,null,Er,He,{})}}export{Pr as component};
